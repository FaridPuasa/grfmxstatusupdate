<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0-alpha1/css/bootstrap.min.css">
    <style>
        .navbar-nav.flex-row {
            flex-direction: row !important;
        }

        .navbar {
            background-color: transparent;
        }

        .container-bg {
            background-color: #333;
        }

        .navbar-nav.flex-row .nav-item {
            margin-right: 10px;
        }

        .bg-red {
            background-color: rgb(255, 110, 110) !important;
        }

        .bg-yellow {
            background-color: yellow !important;
        }

        .bg-blue {
            background-color: rgb(152, 184, 255) !important;
        }

        .bg-green {
            background-color: rgb(137, 253, 126) !important;
        }

        .btn-submit {
            margin-top: 10px;
        }

        th,
        td {
            font-size: 15px;
            text-align: center;
        }

        table {
            width: 100%;
            margin: 0 auto;
        }

        .card {
            margin-bottom: 20px;
        }
    </style>
</head>

<body class="bg-light">
    <div class="container-bg">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-dark">
                <a class="navbar-brand mr-auto" href="/">
                    <h2>Go Rush</h2>
                </a>
                <ul class="navbar-nav flex-row">
                    <% if (['finance', 'warehouse', 'cs' , 'dispatcher' , 'manager' , 'admin' ].includes(user.role)) { %>
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" id="allOrdersDropdown" role="button"
                                data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                Operation
                            </a>
                            <div class="dropdown-menu" aria-labelledby="allOrdersDropdown">
                                <% if (['finance', 'warehouse', 'cs' , 'dispatcher' , 'manager' , 'admin' ].includes(user.role)) { %>
                                        <a class="dropdown-item" href="/updateDelivery">Update Delivery</a>
                                        <a class="dropdown-item" href="/addressAreaCheck">Address Area
                                            Checker</a>
                                            <% } %>
                                            <% if (['cs' , 'warehouse' , 'manager' , 'admin'
                                            ].includes(user.role)) { %>
                                        <a class="dropdown-item" href="/podGenerator">POD / POC Generator</a>
                                        
                                            <div class="dropdown-divider"></div> <!-- Divider here -->
                                            <a class="dropdown-item" href="/listofpharmacyPod">POD Pharmacy</a>
                                            <a class="dropdown-item" href="/listofnoncodPod">POD EWE/PDU/MGLOBAL</a>
                                            <!-- <a class="dropdown-item" href="/listofewePod">POD EWE</a> -->
                                            <a class="dropdown-item" href="/listofldPod">POD LD</a>
                                            <!-- <a class="dropdown-item" href="/listofgrpPod">POD GRP</a> -->
                                            <!-- <a class="dropdown-item" href="/listoffmxPod">POD FMX</a> -->
                                            <a class="dropdown-item" href="/listofcbslPod">POD Cross Border
                                                Service
                                                (Limbang)</a>
                                            <!-- <a class="dropdown-item" href="/listofewensPod">POD EWE NON
                                                        SHEIN</a> -->
                                            <!-- <a class="dropdown-item" href="/listoftemuPod">POD TEMU</a> -->
                                            <!-- <a class="dropdown-item" href="/listoftemuPoc">POC TEMU</a> -->
                                            <a class="dropdown-item" href="/listofkptdpPod">POD KPT</a>
                                            <!-- <a class="dropdown-item" href="/listofkptdfPod">POD KPTDF</a> -->
                                            <!-- <a class="dropdown-item" href="/listofpduPod">POD PDU</a>
                                                    <a class="dropdown-item" href="/listofmglobalPod">POD MGLOBAL</a> -->
                                            <% } %>
                            </div>
                        </li>
                        <% } %>
                            <% if (['moh', 'cs' , 'manager' , 'admin', 'warehouse' ].includes(user.role))
                                {%>
                                <li class="nav-item dropdown">
                                    <a class="nav-link dropdown-toggle" href="#" id="allOrdersDropdown" role="button"
                                        data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                        MOH
                                    </a>
                                    <div class="dropdown-menu" aria-labelledby="allOrdersDropdown">
                                        <% if (['moh'].includes(user.role))
                                {%>
                                        <a class="dropdown-item" href="/mohsearch">Search</a>
                                        <% } %>
                                        <% if (['warehouse', 'cs' , 'manager' , 'admin' ].includes(user.role)) { %>
                                    <a class="dropdown-item" href="/search">Search Pharmacy Order</a>
                                    <% } %>
                                            <% if (['warehouse' , 'cs' , 'manager' , 'admin'
                                                ].includes(user.role)) { %>
                                                <div class="dropdown-divider"></div> <!-- Divider here -->
                                                <a class="dropdown-item" href="/listofpharmacyMOHSTDOrders">STD</a>
                                                <a class="dropdown-item" href="/listofpharmacyMOHEXPOrders">EXP</a>
                                                <a class="dropdown-item" href="/listofpharmacyMOHIMMOrders">IMM</a>
                                                <a class="dropdown-item" href="/listofpharmacyMOHTTGOrders">TTG</a>
                                                <a class="dropdown-item" href="/listofpharmacyMOHKBOrders">KB</a>
                                                <% } %>
                                                    <% if (['cs', 'manager' , 'admin' ].includes(user.role)) { %>
                                                        <div class="dropdown-divider"></div>
                                                        <!-- Divider here -->
                                                        <a class="dropdown-item" href="/listofpharmacyMOHForms">Pharmacy
                                                            Form
                                                            List</a>
                                                            <div class="dropdown-divider"></div>
                                                        <!-- Divider here -->
                                                            <a class="dropdown-item" href="/listofWargaEmasOrders">All
                                            Warga Emas Orders</a>
                                                        <% } %>
                                    </div>
                                </li>
                                <% } %>

                                    <% if (['warehouse', 'finance' , 'cs' , 'manager' , 'admin' ].includes(user.role)) {
                                        %>
                                        <li class="nav-item dropdown">
                                            <a class="nav-link dropdown-toggle" href="#" id="eweListDropdown"
                                                role="button" data-toggle="dropdown" aria-haspopup="true"
                                                aria-expanded="false">
                                                Search Manifest to Bill
                                            </a>
                                            <div class="dropdown-menu" aria-labelledby="eweListDropdown">
                                                <% if (['finance', 'manager' , 'admin' ].includes(user.role)) { %>
                                                    <a class="dropdown-item" href="/ewemanifesttobillsearch">EWE</a>
                                                        <a class="dropdown-item" href="/pdumanifesttobillsearch">PDU</a>
                                                        <a class="dropdown-item" href="/mglobalmanifesttobillsearch">MGLOBAL</a>
                                                    <% } %>
                                            </div>
                                        </li>

                                        <li class="nav-item dropdown">
                                            <a class="nav-link dropdown-toggle" href="#" id="allOrdersDropdown"
                                                role="button" data-toggle="dropdown" aria-haspopup="true"
                                                aria-expanded="false">
                                                Others
                                            </a>
                                            <div class="dropdown-menu" aria-labelledby="allOrdersDropdown">
                                                <a class="dropdown-item" href="/listofpharmacyJPMCOrders">JPMC</a>
                                                <a class="dropdown-item" href="/listofpharmacyPHCOrders">PHC</a>
                                                <a class="dropdown-item" href="/listofLDOrders">Local
                                                    Delivery</a>
                                                    <a class="dropdown-item" href="/listofKPTDPOrders">KPT</a>
                                                <a class="dropdown-item" href="/listofGRPOrders">GRP</a>
                                                <a class="dropdown-item" href="/listofCBSLOrders">Cross Border
                                                    Service
                                                    (Limbang)</a>
                                                <a class="dropdown-item" href="/listofPURE51orders">Pure51</a>
                                                <a class="dropdown-item" href="/listofBBOrders">Baiduri Bank</a>
                                                <a class="dropdown-item" href="/listofFCASOrders">Fathan &
                                                    Co.</a>
                                                <a class="dropdown-item" href="/listofLDJBOrders">Joybean</a>
                                                <a class="dropdown-item" href="/listofICARUSOrders">ICARUS</a>
                                                <a class="dropdown-item" href="/listofFMXOrders">FMX</a>
                                                <a class="dropdown-item" href="/listofEWENSOrders">EWENS</a>
                                            </div>
                                        </li>
                                        <% } %>

                                            <!-- Add conditional rendering for login/logout buttons -->
                                            <% if (user) { %>
                                                <li class="nav-item dropdown">
                                                    <a class="nav-link dropdown-toggle" href="#"
                                                        id="accountSettingsDropdown" role="button"
                                                        data-toggle="dropdown" aria-haspopup="true"
                                                        aria-expanded="false">
                                                        <%= user.name %> (<%= user.role.toUpperCase() %>)
                                                    </a>
                                                    <div class="dropdown-menu"
                                                        aria-labelledby="accountSettingsDropdown">
                                                        <a class="dropdown-item" href="/">Dashboard</a>
                                                        <% if (['admin'].includes(user.role)) { %>
                                                            <a class="dropdown-item" href="/createUser">Create
                                                                User</a>
                                                            <!-- <a class="dropdown-item" href="#">Manage Users</a> -->
                                                            <% } %>
                                                                <!-- <a class="dropdown-item" href="#">Edit
                                                                            Profile</a> -->
                                                                <a class="dropdown-item" href="/logout">Logout</a>
                                                    </div>
                                                </li>
                                                <% } else { %>
                                                    <li class="nav-item">
                                                        <a class="nav-link" href="/login">Login</a>
                                                    </li>
                                                    <% } %>
                </ul>
            </nav>
        </div>
    </div>

    <div class="container mt-4">
        <h1 class="text-center mt-4">Dashboard</h1>

        <% if (['moh', 'admin' ].includes(user.role)) { %>
            <br><a href="/mohsearch"><button class="btn btn-primary">Click here to search for patient
                    record</button></a><br><br>
            <% } %>

                <% if (['warehouse' , 'finance' , 'cs' , 'manager' , 'admin' ].includes(user.role)) { %>
                    <div class="card my-4">
  <div class="card-header bg-dark text-white">
    <h5 class="mb-0">Warehouse</h5>
  </div>
  <div class="card-body">

    <ul class="nav nav-tabs mb-3" id="orderTabs" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="current-tab" data-bs-toggle="tab"
                data-bs-target="#current" type="button" role="tab">Current</button>
        </li>
        <li class="nav-item" role="presentation">
    <button class="nav-link" id="plannedselfcollect-tab" data-bs-toggle="tab"
        data-bs-target="#plannedselfcollect" type="button" role="tab">Planned Self Collect</button>
</li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="urgent-tab" data-bs-toggle="tab" data-bs-target="#urgent"
                type="button" role="tab">Urgent</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="overdue-tab" data-bs-toggle="tab" data-bs-target="#overdue"
                type="button" role="tab">Overdue</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="maxattempt-tab" data-bs-toggle="tab"
                data-bs-target="#maxattempt" type="button" role="tab">Max Attempt</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="fridge-tab" data-bs-toggle="tab" data-bs-target="#fridge"
                type="button" role="tab">Fridge</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="archived-tab" data-bs-toggle="tab"
                data-bs-target="#archived" type="button" role="tab">Archived</button>
        </li>
    </ul>

    <form action="/refresh-urgent" method="get" class="text-end mb-3">
        <button class="btn btn-sm btn-outline-secondary" type="submit">
            <i class="bi bi-arrow-clockwise"></i> Refresh
        </button>
    </form>

    <div class="tab-content">
        <% const tabData = [
            { id: 'current', map: currentMap },
            { id: 'plannedselfcollect', map: plannedSelfCollectMap },
            { id: 'urgent', map: urgentMap },
            { id: 'overdue', map: overdueMap },
            { id: 'maxattempt', map: maxAttemptMap },
            { id: 'fridge', map: fridgeMap },
            { id: 'archived', map: archivedMap }
        ]; %>

        <% tabData.forEach(({ id, map }, tabIndex) => { %>
            <div class="tab-pane fade <%= tabIndex === 0 ? 'show active' : '' %>" id="<%= id %>" role="tabpanel">

                <% if (Object.keys(map).length === 0) { %>
                    <p class="text-center text-muted">No <%= id %> orders found.</p>
                <% } else { %>

                    <% if (id === 'current') { %>
                        <% Object.keys(map).forEach((location, locIndex) => {
                            let locCount = 0;
                            Object.keys(map[location]).forEach(product => {
                                Object.keys(map[location][product]).forEach(area => {
                                    locCount += map[location][product][area].length;
                                });
                            });
                        %>
                            <div class="card my-3">
                                <div class="card-header d-flex justify-content-between align-items-center toggle-header"
                                    style="cursor: pointer;" data-bs-toggle="collapse"
                                    data-bs-target="#collapse-<%= id %>-loc-<%= locIndex %>">
                                    <strong><%= location.toUpperCase() %></strong>
                                    <div>
                                        <span class="badge bg-primary"><%= locCount %> orders</span>
                                        <i class="bi bi-caret-down-fill"></i>
                                    </div>
                                </div>
                                <div class="collapse" id="collapse-<%= id %>-loc-<%= locIndex %>">
                                    <div class="card-body p-0">

                                        <% Object.keys(map[location]).forEach((product, prodIndex) => {
                                            let prodCount = 0;
                                            Object.keys(map[location][product]).forEach(area => {
                                                prodCount += map[location][product][area].length;
                                            });
                                        %>
                                            <div class="card my-2 mx-3">
                                                <div class="card-header d-flex justify-content-between align-items-center toggle-header"
                                                    style="cursor: pointer;"
                                                    data-bs-toggle="collapse"
                                                    data-bs-target="#collapse-<%= id %>-loc-<%= locIndex %>-prod-<%= prodIndex %>">
                                                    <strong><%= product.toUpperCase() %></strong>
                                                    <div>
                                                        <span class="badge bg-success"><%= prodCount %> orders</span>
                                                        <i class="bi bi-caret-down-fill"></i>
                                                    </div>
                                                </div>
                                                <div class="collapse" id="collapse-<%= id %>-loc-<%= locIndex %>-prod-<%= prodIndex %>">
                                                    <div class="card-body p-0">

                                                        <% Object.keys(map[location][product]).forEach((area, areaIndex) => {
                                                            const areaCount = map[location][product][area].length;
                                                        %>
                                                            <div class="card my-2 mx-4">
                                                                <div class="card-header d-flex justify-content-between align-items-center toggle-header"
                                                                    style="cursor: pointer;"
                                                                    data-bs-toggle="collapse"
                                                                    data-bs-target="#collapse-<%= id %>-loc-<%= locIndex %>-prod-<%= prodIndex %>-area-<%= areaIndex %>">
                                                                    <strong><%= area %></strong>
                                                                    <div>
                                                                        <span class="badge bg-warning text-dark"><%= areaCount %> orders</span>
                                                                        <i class="bi bi-caret-down-fill"></i>
                                                                    </div>
                                                                </div>
                                                                <div class="collapse" id="collapse-<%= id %>-loc-<%= locIndex %>-prod-<%= prodIndex %>-area-<%= areaIndex %>">
                                                                    <table class="table table-sm table-bordered mb-0">
                                                                        <thead>
                                                                            <tr>
                                                                                <th>Age</th>
                                                                                <th>Tracking Number</th>
                                                                                <th>Attempt</th>
                                                                                <th>Latest Reason</th>
                                                                                <th>Area</th>
                                                                                <th>Name</th>
                                                                                <th>Main Phone</th>
                                                                                <th>Customer Remark</th>
                                                                                <th>Go Rush Remark</th>
                                                                            </tr>
                                                                        </thead>
                                                                        <tbody>
                                                                            <% map[location][product][area].forEach(order => { %>
                                                                                <tr>
                                                                                    <td>
                                                                                        <span class="badge
                                                                                            <%= order.age >= 30 ? 'bg-dark' :
                                                                                                order.age >= 10 ? 'bg-danger' :
                                                                                                order.age >= 7 ? 'bg-warning text-dark' : 'bg-success' %>">
                                                                                            <%= order.age %> days
                                                                                        </span>
                                                                                    </td>
                                                                                    <td><%= order.doTrackingNumber %></td>
                                                                                    <td><%= order.attempt %></td>
                                                                                    <td><%= order.latestReason %></td>
                                                                                    <td><%= order.area %></td>
                                                                                    <td><%= order.receiverName %></td>
                                                                                    <td><%= order.receiverPhoneNumber %></td>
                                                                                    <td><%= order.remarks || '-' %></td>
                                                                                    <td><%= order.grRemark || '-' %></td>
                                                                                </tr>
                                                                            <% }) %>
                                                                        </tbody>
                                                                    </table>
                                                                </div>
                                                            </div>
                                                        <% }) %>

                                                    </div>
                                                </div>
                                            </div>
                                        <% }) %>

                                    </div>
                                </div>
                            </div>
                        <% }) %>

                    <% } else { %>

                        <% Object.keys(map).forEach((product, index) => { %>
                            <div class="card my-3">
                                <div class="card-header d-flex justify-content-between align-items-center toggle-header"
                                    style="cursor: pointer;"
                                    data-bs-toggle="collapse"
                                    data-bs-target="#collapse-<%= id %>-<%= index %>">
                                    <div><strong><%= product.toUpperCase() %></strong></div>
                                    <div class="d-flex flex-wrap align-items-center gap-2">
                                        <div class="badge bg-danger">
                                            <%= Object.values(map[product]).flat().length %> orders
                                        </div>
                                        <% Object.keys(map[product]).forEach(method => {
                                            const methodCount = map[product][method].length;
                                            if (methodCount > 0) { %>
                                                <span class="badge
                                                    <%= method === 'Standard' ? 'bg-primary' :
                                                        method === 'Express' ? 'bg-warning text-dark' :
                                                        method === 'Drop Off' ? 'bg-info text-dark' :
                                                        method === 'Immediate' ? 'bg-danger' :
                                                        method === 'Self Collect' ? 'bg-success' : 'bg-secondary' %>">
                                                    <%= method %>: <%= methodCount %>
                                                </span>
                                        <% } }) %>
                                        <i class="bi bi-caret-down-fill"></i>
                                    </div>
                                </div>
                                <div class="collapse" id="collapse-<%= id %>-<%= index %>">
                                    <div class="card-body p-0">
                                        <% Object.keys(map[product]).forEach(method => {
                                            const orders = map[product][method].filter(o => id !== 'maxattempt' || o.age < 30);
                                            if (orders.length > 0) { %>
                                                <div class="px-3 pt-3"><strong><%= method %></strong></div>
                                                <table class="table table-sm table-bordered mb-0">
                                                    <thead>
                                                        <tr>
                                                            <th>Age</th>
                                                            <th>Tracking Number</th>
                                                            <th>Location</th>
                                                            <th>Attempt</th>
                                                            <th>Latest Reason</th>
                                                            <th>Area</th>
                                                            <th>Name</th>
                                                            <th>Main Phone</th>
                                                            <th>Customer Remark</th>
                                                            <th>Go Rush Remark</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <% orders.forEach(order => { %>
                                                            <tr>
                                                                <td>
                                                                    <span class="badge
                                                                        <%= order.age >= 30 ? 'bg-dark' :
                                                                            order.age >= 10 ? 'bg-danger' :
                                                                            order.age >= 7 ? 'bg-warning text-dark' : 'bg-success' %>">
                                                                        <%= order.age %> days
                                                                    </span>
                                                                </td>
                                                                <td><%= order.doTrackingNumber %></td>
                                                                <td><%= order.location || '-' %></td>
                                                                <td><%= order.attempt %></td>
                                                                <td><%= order.latestReason %></td>
                                                                <td><%= order.area %></td>
                                                                <td><%= order.receiverName %></td>
                                                                <td><%= order.receiverPhoneNumber %></td>
                                                                <td><%= order.remarks || '-' %></td>
                                                                <td><%= order.grRemark || '-' %></td>
                                                            </tr>
                                                        <% }) %>
                                                    </tbody>
                                                </table>
                                                <hr class="my-1">
                                        <% } }) %>
                                    </div>
                                </div>
                            </div>
                        <% }) %>

                    <% } %>

                <% } %>

            </div>
        <% }) %>
    </div>
</div>
  </div>


<div class="card my-4">
  <div class="card-header bg-success text-white">
    <h5 class="mb-0">In Progress / Completed</h5>
  </div>
  <div class="card-body">

    <ul class="nav nav-tabs mb-3" id="deliveryTabs" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="activejobs-tab" data-bs-toggle="tab" data-bs-target="#activejobs-content" type="button" role="tab" aria-controls="activejobs-content" aria-selected="true">
                Active Jobs
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="codbt-tab" data-bs-toggle="tab" data-bs-target="#codbt-content" type="button" role="tab" aria-controls="codbt-content" aria-selected="false">
                COD/BT Collected
            </button>
        </li>
        <li class="nav-item" role="presentation">
    <button class="nav-link" id="completed-jobs-tab" data-bs-toggle="tab" data-bs-target="#completed-jobs" type="button" role="tab" aria-controls="completed-jobs" aria-selected="false">
        Completed Jobs
    </button>
</li>
    </ul>

    <div class="tab-content">
        <!-- Active Jobs Tab -->
        <div class="tab-pane fade show active" id="activejobs-content" role="tabpanel" aria-labelledby="activejobs-tab">
    <% if (Object.keys(deliveriesMap).length === 0) { %>
        <p class="text-center text-muted">No jobs found.</p>
    <% } else { %>
        <% Object.keys(deliveriesMap).forEach((date, dateIndex) => {
            // Calculate total jobs for badge
            let dateCount = 0;
            Object.keys(deliveriesMap[date]).forEach(assignee => {
                if (assignee === 'Selfcollect') {
                    // Sum all job method counts for Selfcollect
                    const statuses = deliveriesMap[date][assignee].__statuses || {};
                    Object.keys(statuses).forEach(st => {
                        dateCount += statuses[st].length;
                    });
                } else {
                    Object.keys(deliveriesMap[date][assignee].__products).forEach(product => {
                        dateCount += deliveriesMap[date][assignee].__products[product].length;
                    });
                }
            });
        %>
            <div class="card my-3">
                <div class="card-header d-flex align-items-center toggle-header"
                    style="cursor: pointer; width: 100%;" data-bs-toggle="collapse"
                    data-bs-target="#collapse-activejobs-<%= dateIndex %>">
                    <div style="flex-grow: 1;">
                        <strong><%= date %></strong>
                    </div>
                    <span class="badge bg-primary ms-3"><%= dateCount %> jobs</span>
                    <i class="bi bi-caret-down-fill ms-3"></i>
                </div>
                <div class="collapse" id="collapse-activejobs-<%= dateIndex %>">
                    <div class="card-body p-0">
                        <% 
                            // Separate Selfcollect and other dispatchers
                            const otherDispatchers = [];
                            let selfcollectDispatcher = null;
                            Object.keys(deliveriesMap[date]).forEach(assignee => {
                                if (assignee === 'Selfcollect') {
                                    selfcollectDispatcher = deliveriesMap[date][assignee];
                                } else {
                                    otherDispatchers.push({ name: assignee, data: deliveriesMap[date][assignee] });
                                }
                            });

                            // Sort other dispatchers alphabetically
                            otherDispatchers.sort((a,b) => a.name.localeCompare(b.name));

                            // Render other dispatchers first
                            otherDispatchers.forEach((disp, assignIndex) => {
                                let assigneeCount = 0;
                                Object.keys(disp.data.__products).forEach(product => {
                                    assigneeCount += disp.data.__products[product].length;
                                });
                        %>
                            <div class="card my-2 mx-3">
                                <div class="card-header d-flex align-items-center toggle-header"
                                    style="cursor: pointer; width: 100%;"
                                    data-bs-toggle="collapse"
                                    data-bs-target="#collapse-activejobs-<%= dateIndex %>-<%= assignIndex %>">
                                    <div style="flex-grow: 1;">
                                        <strong><%= disp.name %> <span style="font-weight:normal;">(<%= disp.data.__areas ? disp.data.__areas.join(', ') : '' %>)</span></strong>
                                    </div>
                                    <span class="badge bg-success ms-3"><%= assigneeCount %> jobs</span>
                                    <i class="bi bi-caret-down-fill ms-3"></i>
                                </div>
                                <div class="collapse" id="collapse-activejobs-<%= dateIndex %>-<%= assignIndex %>">
                                    <div class="card-body p-0">
                                        <% Object.keys(disp.data.__products).forEach((product, prodIndex) => {
                                            const productCount = disp.data.__products[product].length;
                                        %>
                                            <div class="card my-2 mx-3">
                                                <div class="card-header d-flex align-items-center toggle-header"
                                                    style="cursor: pointer; width: 100%;"
                                                    data-bs-toggle="collapse"
                                                    data-bs-target="#collapse-activejobs-<%= dateIndex %>-<%= assignIndex %>-<%= prodIndex %>">
                                                    <div style="flex-grow: 1;">
                                                        <strong><%= product.toUpperCase() %></strong>
                                                    </div>
                                                    <span class="badge bg-warning text-dark ms-3"><%= productCount %> jobs</span>
                                                    <i class="bi bi-caret-down-fill ms-3"></i>
                                                </div>
                                                <div class="collapse" id="collapse-activejobs-<%= dateIndex %>-<%= assignIndex %>-<%= prodIndex %>">
                                                    <div class="card-body p-0">
                                                        <table class="table table-sm table-bordered mb-0">
                                                            <thead>
                                                                <tr>
                                                                    <th>Tracking Number</th>
                                                                    <th>Area</th>
                                                                    <th>Name</th>
                                                                    <th>Main Phone</th>
                                                                    <th>Go Rush Remark</th>
                                                                </tr>
                                                            </thead>
                                                            <tbody>
                                                                <% disp.data.__products[product].forEach(order => { %>
                                                                    <tr>
                                                                        <td><%= order.doTrackingNumber %></td>
                                                                        <td><%= order.area || '-' %></td>
                                                                        <td><%= order.receiverName %></td>
                                                                        <td><%= order.receiverPhoneNumber %></td>
                                                                        <td><%= order.grRemark %></td>
                                                                    </tr>
                                                                <% }) %>
                                                            </tbody>
                                                        </table>
                                                    </div>
                                                </div>
                                            </div>
                                        <% }) %>
                                    </div>
                                </div>
                            </div>
                        <% }) %>

                        <% if (selfcollectDispatcher) { 
                            // Get job methods for Selfcollect in sorted order
                            const statuses = selfcollectDispatcher.__statuses || {};
                            const jobMethodsOrder = ['Self Collect', 'Drop Off'];
                            const availableJobMethods = jobMethodsOrder.filter(m => statuses[m] && statuses[m].length > 0);
                        %>
                            <div class="card my-2 mx-3">
                                <div class="card-header d-flex align-items-center toggle-header"
                                    style="cursor: pointer; width: 100%;"
                                    data-bs-toggle="collapse"
                                    data-bs-target="#collapse-activejobs-<%= dateIndex %>-selfcollect">
                                    <div style="flex-grow: 1;">
                                        <strong>Selfcollect <span style="font-weight:normal;">(<%= availableJobMethods.join(', ') %>)</span></strong>
                                    </div>
                                    <span class="badge bg-success ms-3">
                                        <%= availableJobMethods.reduce((acc, method) => acc + statuses[method].length, 0) %> jobs
                                    </span>
                                    <i class="bi bi-caret-down-fill ms-3"></i>
                                </div>
                                <div class="collapse" id="collapse-activejobs-<%= dateIndex %>-selfcollect">
                                    <div class="card-body p-0">
                                        <% availableJobMethods.forEach((jobMethod, statusIndex) => {
                                            const jobs = statuses[jobMethod];
                                        %>
                                            <div class="card my-2 mx-3">
                                                <div class="card-header d-flex align-items-center toggle-header"
                                                    style="cursor: pointer; width: 100%;"
                                                    data-bs-toggle="collapse"
                                                    data-bs-target="#collapse-activejobs-<%= dateIndex %>-selfcollect-<%= statusIndex %>">
                                                    <div style="flex-grow: 1;">
                                                        <strong><%= jobMethod %></strong>
                                                    </div>
                                                    <span class="badge bg-success ms-3"><%= jobs.length %> jobs</span>
                                                    <i class="bi bi-caret-down-fill ms-3"></i>
                                                </div>
                                                <div class="collapse" id="collapse-activejobs-<%= dateIndex %>-selfcollect-<%= statusIndex %>">
                                                    <div class="card-body p-0">
                                                        <table class="table table-sm table-bordered mb-0">
                                                            <thead>
                                                                <tr>
                                                                    <th>Tracking Number</th>
                                                                    <th>Name</th>
                                                                    <th>Main Phone</th>
                                                                    <th>Go Rush Remark</th>
                                                                </tr>
                                                            </thead>
                                                            <tbody>
                                                                <% jobs.forEach(order => { %>
                                                                    <tr>
                                                                        <td><%= order.doTrackingNumber %></td>
                                                                        <td><%= order.receiverName %></td>
                                                                        <td><%= order.receiverPhoneNumber %></td>
                                                                        <td><%= order.grRemark %></td>
                                                                    </tr>
                                                                <% }) %>
                                                            </tbody>
                                                        </table>
                                                    </div>
                                                </div>
                                            </div>
                                        <% }) %>
                                    </div>
                                </div>
                            </div>
                        <% } %>
                    </div>
                </div>
            </div>
        <% }) %>
    <% } %>
</div>

        <!-- COD/BT Collected Tab -->
        <div class="tab-pane fade" id="codbt-content" role="tabpanel" aria-labelledby="codbt-tab">
            <div class="row mt-3">
                <div class="col-md-4">
                    <input type="date" id="codbt-date-picker" class="form-control" />
                </div>
                <div class="col-md-2">
                    <button id="refresh-codbt-btn" class="btn btn-primary w-100" disabled>Refresh</button>
                </div>
            </div>

            <div class="table-responsive mt-3">
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Dispatcher</th>
                            <th>Total Amount</th>
                            <th>Cash</th>
                            <th>BT</th>
                        </tr>
                    </thead>
                    <tbody id="codbt-table-body">
    <tr>
        <td colspan="4" class="text-center text-muted">Select a date to view COD/BT Collected data.</td>
    </tr>
</tbody>
                </table>
            </div>
        </div>
        <div class="tab-pane fade" id="completed-jobs" role="tabpanel" aria-labelledby="completed-jobs-tab">
    <div class="d-flex align-items-center my-2">
        <input type="date" id="completed-jobs-date-picker" class="form-control me-2" style="max-width: 200px;">
        <button class="btn btn-primary" id="refresh-completed-jobs-btn">Refresh</button>
    </div>
    <table class="table table-hover table-bordered">
        <thead>
            <tr>
                <th>Dispatcher</th>
                <th>In Progress</th>
                <th>Completed</th>
                <th>Failed</th>
            </tr>
        </thead>
        <tbody id="completed-jobs-table-body">
            <!-- Filled by JS -->
        </tbody>
    </table>
</div>

    </div>



    </div>
  </div>

    <div class="card my-4">
  <div class="card-header bg-primary text-white">
    <h5 class="mb-0">New Orders</h5>
  </div>
  <div class="card-body">
    <!-- Tabs -->
    <ul class="nav nav-tabs" id="newOrdersTabs" role="tablist">
      <li class="nav-item" role="presentation">
        <button class="nav-link active" id="grwebsite-tab" 
        data-bs-toggle="tab" 
        data-bs-target="#gr-website"
        type="button" role="tab" 
        aria-controls="gr-website" 
        aria-selected="true">
  GR Website
</button>
      </li>
      <li class="nav-item" role="presentation">
        <button class="nav-link" id="ewe-tab" data-bs-toggle="tab" data-bs-target="#ewe" type="button" role="tab" aria-controls="ewe" aria-selected="false">
          EWE x PDU x MGLOBAL
        </button>
      </li>
      <li class="nav-item" role="presentation">
        <button class="nav-link" id="wargaemas-tab" data-bs-toggle="tab" data-bs-target="#wargaemas" type="button" role="tab" aria-controls="wargaemas" aria-selected="false">
          Warga Emas (MOH)
        </button>
      </li>
      <li class="nav-item" role="presentation">
  <button class="nav-link" id="temu-tab" 
          data-bs-toggle="tab" 
          data-bs-target="#temu"
          type="button" role="tab" 
          aria-controls="temu" 
          aria-selected="false">
    TEMU Returns
  </button>
</li>
    </ul>

    <!-- Tab Content -->
    <div class="tab-content mt-3" id="newOrdersTabsContent">
      <!-- GR Website -->
      <div class="tab-pane fade show active" id="gr-website" role="tabpanel">
    <div class="d-flex justify-content-start align-items-center mb-3">
      <input type="date" id="grWebsiteDate" class="form-control w-auto" />
    </div>
    <div id="grWebsiteContainer">
      <!-- Products and orders will be loaded here -->
    </div>
  </div>

      <!-- EWE x PDU x MGLOBAL -->
      <div class="tab-pane fade" id="ewe" role="tabpanel" aria-labelledby="ewe-tab">
        <p class="text-muted">No data yet for EWE x PDU x MGLOBAL.</p>
      </div>

      <!-- Warga Emas (MOH) -->
      <div class="tab-pane fade" id="wargaemas" role="tabpanel" aria-labelledby="wargaemas-tab">
        <p class="text-muted">No data yet for Warga Emas (MOH).</p>
      </div>

      <!-- TEMU Returns -->
      <div class="tab-pane fade" id="temu" role="tabpanel" aria-labelledby="temu-tab">
  <div class="d-flex justify-content-start align-items-center mb-3">
    <input type="date" id="temuReturnsDate" class="form-control w-auto" />
  </div>
  <div id="temuReturnsContainer">
    <p class="text-muted">No TEMU returns loaded yet.</p>
  </div>
</div>
    </div>
  </div>
</div>
                    <% } %>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/moment@2.29.4/moment.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-alpha1/dist/js/bootstrap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

<script>
    let codBtData = null;
let codBtLoaded = false;  // flag to prevent multiple loads

let completedJobsData = null;
let completedJobsLoaded = false;

async function loadCompletedJobs() {
    const datePicker = document.getElementById('completed-jobs-date-picker');
    const selectedDate = datePicker.value || moment().format('YYYY-MM-DD');

    const formattedDateKey = moment(selectedDate).format('YYYY-MM-DD');
    const tableBody = document.getElementById('completed-jobs-table-body');

    // Show loading spinner
    tableBody.innerHTML = `
        <tr><td colspan="4" class="text-center">
            <div class="spinner-border text-primary" role="status"></div>
        </td></tr>
    `;

    try {
        const response = await fetch(`/api/completed-jobs?date=${formattedDateKey}`);
        const data = await response.json();
        completedJobsData = data;

        renderCompletedJobsTable(data);
        completedJobsLoaded = true;
    } catch (error) {
        console.error('Failed to load completed jobs:', error);
        tableBody.innerHTML = `<tr><td colspan="4" class="text-center text-danger">Failed to load data.</td></tr>`;
    }
}

function createBadge(count, color='primary') {
    return `<span class="badge bg-${color} ms-2">${count}</span>`;
}

function renderCompletedJobsTable(data) {
    const tableBody = document.getElementById('completed-jobs-table-body');
    tableBody.innerHTML = '';

    const dispatchers = Object.keys(data).sort();
    if (dispatchers.length === 0) {
        tableBody.innerHTML = `<tr><td colspan="4" class="text-center text-muted">No records found for selected date.</td></tr>`;
        return;
    }

    let totalInProgress = 0;
    let totalCompleted = 0;
    let totalFailed = 0;

    dispatchers.forEach((dispatcher, idx) => {
        const d = data[dispatcher];
        const inProgressCount = d.inProgress.length;
        const completedCount = d.completed.length;
        const failedCount = d.failed.length;

        totalInProgress += inProgressCount;
        totalCompleted += completedCount;
        totalFailed += failedCount;

        const dispatcherCollapseId = `dispatcher-collapse-${idx}`;

        // Dispatcher summary row
        tableBody.insertAdjacentHTML('beforeend', `
            <tr data-bs-toggle="collapse" data-bs-target="#${dispatcherCollapseId}" style="cursor:pointer; background-color:#f8f9fa;">
                <td>${dispatcher}</td>
                <td>In Progress ${createBadge(inProgressCount, 'info')}</td>
                <td>Completed ${createBadge(completedCount, 'success')}</td>
                <td>Failed ${createBadge(failedCount, 'danger')}</td>
            </tr>
        `);

        // Dispatcher-level collapse row containing the statuses
        let statusRows = '';

        // In Progress
        if (inProgressCount > 0) {
            const statusCollapseId = `${dispatcherCollapseId}-inprogress`;
            statusRows += `
                <tr data-bs-toggle="collapse" data-bs-target="#${statusCollapseId}" style="cursor:pointer; background-color:#e9f5ff;">
                    <td colspan="4">In Progress Jobs ${createBadge(inProgressCount, 'info')}</td>
                </tr>
                <tr class="collapse" id="${statusCollapseId}">
                    <td colspan="4" style="padding:0;">
                        <table class="table table-sm table-bordered mb-0">
                            <thead>
                                <tr>
                                    <th>Tracking Number</th>
                                    <th>Product</th>
                                    <th>Job Method</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${d.inProgress.map(job => `
                                    <tr>
                                        <td>${job.doTrackingNumber || '-'}</td>
                                        <td>${job.product || '-'}</td>
                                        <td>${job.jobMethod || '-'}</td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    </td>
                </tr>
            `;
        }

        // Completed
        if (completedCount > 0) {
            const statusCollapseId = `${dispatcherCollapseId}-completed`;
            statusRows += `
                <tr data-bs-toggle="collapse" data-bs-target="#${statusCollapseId}" style="cursor:pointer; background-color:#e6f4ea;">
                    <td colspan="4">Completed Jobs ${createBadge(completedCount, 'success')}</td>
                </tr>
                <tr class="collapse" id="${statusCollapseId}">
                    <td colspan="4" style="padding:0;">
                        <table class="table table-sm table-bordered mb-0">
                            <thead>
                                <tr>
                                    <th>Tracking Number</th>
                                    <th>Product</th>
                                    <th>Job Method</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${d.completed.map(job => `
                                    <tr>
                                        <td>${job.doTrackingNumber || '-'}</td>
                                        <td>${job.product || '-'}</td>
                                        <td>${job.jobMethod || '-'}</td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    </td>
                </tr>
            `;
        }

        // Failed
        if (failedCount > 0) {
            const statusCollapseId = `${dispatcherCollapseId}-failed`;
            statusRows += `
                <tr data-bs-toggle="collapse" data-bs-target="#${statusCollapseId}" style="cursor:pointer; background-color:#fdecea;">
                    <td colspan="4">Failed Jobs ${createBadge(failedCount, 'danger')}</td>
                </tr>
                <tr class="collapse" id="${statusCollapseId}">
                    <td colspan="4" style="padding:0;">
                        <table class="table table-sm table-bordered mb-0">
                            <thead>
                                <tr>
                                    <th>Tracking Number</th>
                                    <th>Product</th>
                                    <th>Job Method</th>
                                    <th>Reason</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${d.failed.map(job => `
                                    <tr>
                                        <td>${job.doTrackingNumber || '-'}</td>
                                        <td>${job.product || '-'}</td>
                                        <td>${job.jobMethod || '-'}</td>
                                        <td>${job.reason || '-'}</td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    </td>
                </tr>
            `;
        }

        tableBody.insertAdjacentHTML('beforeend', `
            <tr class="collapse" id="${dispatcherCollapseId}">
                <td colspan="4" style="padding:0;">
                    <table class="table table-sm mb-0">
                        <tbody>${statusRows}</tbody>
                    </table>
                </td>
            </tr>
        `);
    });

    // Grand total row
    tableBody.insertAdjacentHTML('beforeend', `
        <tr class="table-secondary fw-bold" style="position: sticky; bottom: 0; background-color: #f1f1f1;">
            <td>Grand Total</td>
            <td>In Progress: ${totalInProgress}</td>
            <td>Completed: ${totalCompleted}</td>
            <td>Failed: ${totalFailed}</td>
        </tr>
    `);
}

// Event Listeners
document.getElementById('completed-jobs-date-picker').addEventListener('change', () => {
    loadCompletedJobs();
});

document.getElementById('completed-jobs-tab').addEventListener('shown.bs.tab', () => {
    if (!completedJobsLoaded) {
        if (!document.getElementById('completed-jobs-date-picker').value) {
            document.getElementById('completed-jobs-date-picker').value = moment().format('YYYY-MM-DD');
        }
        loadCompletedJobs();
    }
});

// Optional: a refresh button
document.getElementById('refresh-completed-jobs-btn').addEventListener('click', () => {
    loadCompletedJobs();
});

async function loadCodBtData() {
    const selectedDate = document.getElementById('codbt-date-picker').value;
    const formattedDate = moment(selectedDate).format('YYYY-MM-DD');

    const tableBody = document.getElementById('codbt-table-body');
    tableBody.innerHTML = `
        <tr id="codbt-loading-spinner">
            <td colspan="4" class="text-center">
                <div class="spinner-border text-primary" role="status"></div>
            </td>
        </tr>
    `;

    try {
        const response = await fetch(`/api/codbt-collected?date=${formattedDate}`);
        const data = await response.json();
        codBtData = data;
        refreshCodBtTable();
        codBtLoaded = true;
    } catch (error) {
        console.error('Failed to fetch COD/BT data:', error);
        tableBody.innerHTML = '<tr><td colspan="4" class="text-center text-danger">Failed to load data.</td></tr>';
    }
}

    // Helper to group jobs by payment method in desired order
    function groupJobsByPaymentMethod(jobs) {
        const paymentGroups = {
            cash: [],
            bankTransfer: [],
            billPayment: [],
            others: []
        };

        jobs.forEach(job => {
            const pm = job.paymentMethod.toLowerCase();
            if (pm === 'cash') {
                paymentGroups.cash.push(job);
            } else if (pm.includes('bank transfer')) {
                paymentGroups.bankTransfer.push(job);
            } else if (pm.includes('bill payment')) {
                paymentGroups.billPayment.push(job);
            } else {
                paymentGroups.others.push(job);
            }
        });

        return [
            ...paymentGroups.cash,
            ...paymentGroups.bankTransfer,
            ...paymentGroups.billPayment,
            ...paymentGroups.others
        ];
    }

    function refreshCodBtTable() {
    const selectedDate = document.getElementById('codbt-date-picker').value;
    const formattedDate = moment(selectedDate).format('DD-MM-YYYY');

    const tableBody = document.getElementById('codbt-table-body');
    tableBody.innerHTML = '';

    if (codBtData && codBtData[formattedDate]) {
        const dispatchers = codBtData[formattedDate];
        let grandTotal = 0;
        let grandCash = 0;
        let grandBT = 0;

        // Helper to sort jobs by payment method: Cash, Bank Transfer, Bill Payment
        function sortJobsByPayment(jobs) {
            const cashJobs = [];
            const bankTransferJobs = [];
            const billPaymentJobs = [];
            const others = [];

            jobs.forEach(job => {
                const pm = job.paymentMethod || '';
                if (pm === 'Cash') {
                    cashJobs.push(job);
                } else if (pm.includes('Bank Transfer')) {
                    bankTransferJobs.push(job);
                } else if (pm.includes('Bill Payment')) {
                    billPaymentJobs.push(job);
                } else {
                    others.push(job);
                }
            });

            return [...cashJobs, ...bankTransferJobs, ...billPaymentJobs, ...others];
        }

        // Render all dispatchers except Selfcollect first (sorted alphabetically)
        const dispatcherNames = Object.keys(dispatchers).filter(d => d !== 'Selfcollect').sort();

        dispatcherNames.forEach((dispatcher, index) => {
            const data = dispatchers[dispatcher];
            const totalAmount = data.total || 0;
            const cashAmount = data.cash || 0;
            const btAmount = data.bt || 0;

            if (totalAmount > 0 || cashAmount > 0 || btAmount > 0) {
                const collapseId = `dispatcher-collapse-${index}`;

                const sortedJobs = sortJobsByPayment(data.jobs || []);

                const summaryRow = `
                    <tr data-bs-toggle="collapse" data-bs-target="#${collapseId}" style="cursor:pointer;">
                        <td>${dispatcher}</td>
                        <td>${totalAmount.toFixed(2)}</td>
                        <td>${cashAmount.toFixed(2)}</td>
                        <td>${btAmount.toFixed(2)}</td>
                    </tr>
                    <tr class="collapse" id="${collapseId}">
                        <td colspan="4">
                            <table class="table table-sm table-bordered mb-0">
                                <thead>
                                    <tr>
                                        <th>Tracking Number</th>
                                        <th>Product</th>
                                        <th>Delivery Type</th>
                                        <th>Payment Method</th>
                                        <th>Total Amount</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${sortedJobs.map(job => `
                                        <tr>
                                            <td>${job.doTrackingNumber}</td>
                                            <td>${job.product}</td>
                                            <td>${job.jobMethod}</td>
                                            <td>${job.paymentMethod}</td>
                                            <td>${job.totalPrice.toFixed(2)}</td>
                                        </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                        </td>
                    </tr>
                `;
                tableBody.insertAdjacentHTML('beforeend', summaryRow);

                grandTotal += totalAmount;
                grandCash += cashAmount;
                grandBT += btAmount;
            }
        });

        // Render Selfcollect last, as a single dispatcher row named "Selfcollect"
        const selfcollectData = dispatchers['Selfcollect'];
        if (selfcollectData && selfcollectData.__statuses) {
            // Aggregate totals for Selfcollect over both statuses
            let scTotal = 0, scCash = 0, scBT = 0;
            const jobsByStatus = {};
            const statusOrder = ['Self Collect', 'Drop Off'];

            // Collect all jobs per status & accumulate totals
            statusOrder.forEach(status => {
                const statusData = selfcollectData.__statuses[status];
                if (statusData) {
                    scTotal += statusData.total || 0;
                    scCash += statusData.cash || 0;
                    scBT += statusData.bt || 0;
                    jobsByStatus[status] = statusData.jobs || [];
                } else {
                    jobsByStatus[status] = [];
                }
            });

            if (scTotal > 0 || scCash > 0 || scBT > 0) {
                const collapseId = `dispatcher-collapse-selfcollect`;

                // Flatten jobs: Self Collect jobs first, then Drop Off jobs
                const allJobs = [...jobsByStatus['Self Collect'], ...jobsByStatus['Drop Off']];
                const sortedJobs = sortJobsByPayment(allJobs);

                const summaryRow = `
                    <tr data-bs-toggle="collapse" data-bs-target="#${collapseId}" style="cursor:pointer;">
                        <td>Selfcollect</td>
                        <td>${scTotal.toFixed(2)}</td>
                        <td>${scCash.toFixed(2)}</td>
                        <td>${scBT.toFixed(2)}</td>
                    </tr>
                    <tr class="collapse" id="${collapseId}">
                        <td colspan="4">
                            <table class="table table-sm table-bordered mb-0">
                                <thead>
                                    <tr>
                                        <th>Tracking Number</th>
                                        <th>Product</th>
                                        <th>Delivery Type</th>
                                        <th>Payment Method</th>
                                        <th>Total Amount</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${sortedJobs.map(job => `
                                        <tr>
                                            <td>${job.doTrackingNumber}</td>
                                            <td>${job.product}</td>
                                            <td>${job.jobMethod}</td>
                                            <td>${job.paymentMethod}</td>
                                            <td>${job.totalPrice.toFixed(2)}</td>
                                        </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                        </td>
                    </tr>
                `;
                tableBody.insertAdjacentHTML('beforeend', summaryRow);

                grandTotal += scTotal;
                grandCash += scCash;
                grandBT += scBT;
            }
        }

        // Grand Total row
        const grandRow = `
            <tr class="table-success fw-bold">
                <td>Grand Total</td>
                <td>${grandTotal.toFixed(2)}</td>
                <td>${grandCash.toFixed(2)}</td>
                <td>${grandBT.toFixed(2)}</td>
            </tr>
        `;
        tableBody.insertAdjacentHTML('beforeend', grandRow);

        // ======= ADDITION: Auto-expand first dispatcher if only one dispatcher present =======
        const dispatcherKeys = Object.keys(dispatchers).filter(d => {
            const data = dispatchers[d];
            // Check if dispatcher has any total > 0 or cash > 0 or bt > 0 to count as a dispatcher with data
            if (d === 'Selfcollect' && data.__statuses) {
                // Sum totals of Selfcollect statuses
                let sumTotal = 0;
                for (const status in data.__statuses) {
                    sumTotal += data.__statuses[status].total || 0;
                }
                return sumTotal > 0;
            } else {
                return (data.total || 0) > 0 || (data.cash || 0) > 0 || (data.bt || 0) > 0;
            }
        });

        if (dispatcherKeys.length === 1) {
            let collapseIdToExpand;
            if (dispatcherKeys[0] === 'Selfcollect') {
                collapseIdToExpand = 'dispatcher-collapse-selfcollect';
            } else {
                // Find index of dispatcher for collapse id
                const index = dispatcherNames.indexOf(dispatcherKeys[0]);
                collapseIdToExpand = `dispatcher-collapse-${index}`;
            }
            const collapseElement = document.getElementById(collapseIdToExpand);
            if (collapseElement) {
                // Bootstrap 5 collapse toggle open
                const bsCollapse = new bootstrap.Collapse(collapseElement, { toggle: true });
            }
        }
    } else {
        tableBody.innerHTML = '<tr><td colspan="4" class="text-center text-muted">No records found for selected date.</td></tr>';
    }
}

    // Event listeners
    document.getElementById('codbt-date-picker').addEventListener('change', () => {
    document.getElementById('refresh-codbt-btn').disabled = false;
    loadCodBtData();
});

    // Only load COD/BT data when tab is shown, once
document.getElementById('codbt-tab').addEventListener('shown.bs.tab', () => {
    if (!codBtLoaded) {
        // Initialize date picker to today if empty
        if (!document.getElementById('codbt-date-picker').value) {
            document.getElementById('codbt-date-picker').value = moment().format('YYYY-MM-DD');
        }
        loadCodBtData();
    }
});

    // Load on refresh button click and date change as usual
document.getElementById('codbt-date-picker').addEventListener('change', () => {
    if (codBtLoaded) loadCodBtData();
});
document.getElementById('refresh-codbt-btn').addEventListener('click', () => {
    loadCodBtData();
});
</script>

<script>
$(document).ready(function () {
  const today = moment().format("YYYY-MM-DD");
  $("#temuReturnsDate").val(today);

  function loadTemuReturns(date) {
    $("#temuReturnsContainer").html(`
  <div class="d-flex justify-content-center my-3">
    <div class="spinner-border text-primary" role="status">
    </div>
  </div>`);

    $.get(`/api/new-orders/temu-returns?date=${date}`, function (orders) {
      if (!orders || orders.length === 0) {
        $("#temuReturnsContainer").html(
          `<p class="text-muted">No TEMU returns found for ${moment(date).format("DD-MM-YYYY")}.</p>`
        );
        return;
      }

      // Sort newest → oldest
      orders.sort((a, b) => moment(b.dateUpdated).valueOf() - moment(a.dateUpdated).valueOf());

      let html = `
        <div class="card">
          <div class="card-header bg-primary text-white">
            <h6 class="mb-0">TEMU Returns (${moment(date).format("DD-MM-YYYY")})</h6>
          </div>
          <div class="card-body p-0">
            <table class="table table-sm table-striped mb-0">
              <thead class="table-light">
                <tr>
                  <th>Tracking Number</th>
                  <th>Area</th>
                  <th>Name</th>
                  <th>Main Phone</th>
                </tr>
              </thead>
              <tbody>
      `;

      orders.forEach(order => {
        html += `
          <tr>
            <td>${order.trackingNumber || "-"}</td>
            <td>${order.area || "-"}</td>
            <td>${order.name || "-"}</td>
            <td>${order.phone || "-"}</td>
          </tr>
        `;
      });

      html += `
              </tbody>
            </table>
          </div>
        </div>
      `;

      $("#temuReturnsContainer").html(html);
    });
  }

  // Load TEMU Returns immediately on page load
  loadTemuReturns(today);

  // Refresh when tab is shown
  $('a[data-bs-toggle="tab"][href="#temu"]').on("shown.bs.tab", function () {
    const date = $("#temuReturnsDate").val();
    loadTemuReturns(date);
  });

  // Refresh when picking another date
  $("#temuReturnsDate").on("change", function () {
    loadTemuReturns($(this).val());
  });
});
</script>

<script>
async function fetchGRWebsiteOrders(date) {
  const container = document.getElementById('grWebsiteContainer');
  container.innerHTML = `
  <div class="d-flex justify-content-center my-3">
    <div class="spinner-border text-primary" role="status">
    </div>
  </div>`;

  try {
    const res = await fetch(`/api/new-orders/gr-website?date=${date}`);
    const data = await res.json();

    container.innerHTML = '';

    if (!data || Object.keys(data).length === 0) {
      container.innerHTML = '<p>No orders found for selected date.</p>';
      return;
    }

    // Loop through products
    Object.keys(data).forEach(product => {
      let orders = data[product];
      const productId = `product-${product.replace(/\s+/g, '-')}`;

      // Sort orders from newest to oldest
      orders.sort((a, b) => {
        const dateA = a.dateUpdated || a.dateCreated;
        const dateB = b.dateUpdated || b.dateCreated;
        return moment(dateB).valueOf() - moment(dateA).valueOf();
      });

      const productCard = document.createElement('div');
      productCard.classList.add('card', 'mb-3');

      // Product header (collapsible)
      const header = document.createElement('div');
      header.classList.add('card-header', 'bg-secondary', 'text-white', 'cursor-pointer');
      header.setAttribute('data-bs-toggle', 'collapse');
      header.setAttribute('data-bs-target', `#${productId}`);
      header.style.cursor = 'pointer';
      header.innerHTML = `
        ${product} 
        <span class="badge bg-light text-dark float-end">${orders.length}</span>
      `;
      productCard.appendChild(header);

      // Collapsible body
      const body = document.createElement('div');
      body.classList.add('collapse');
      body.id = productId;

      const table = document.createElement('table');
      table.classList.add('table', 'table-sm', 'table-bordered', 'mb-0');

      // Determine columns based on product
let columns;
if (["pharmacymoh", "pharmacyjpmc", "pharmacyphc", "localdelivery"].includes(product.toLowerCase())) {
  columns = ["Tracking Number", "Order Time", "Job Method", "Area", "Name", "Main Phone"];
} else if (product.toLowerCase() === "cbsl") {
  columns = ["Tracking Number", "Parcel Tracking Number", "Order Time", "Job Method", "Area", "Name", "Main Phone"];
} else {
  columns = ["Tracking Number", "Order Time", "Job Method", "Area", "Name", "Main Phone"];
}

      const thead = document.createElement('thead');
      thead.innerHTML = `<tr>${columns.map(col => `<th>${col}</th>`).join('')}</tr>`;
      table.appendChild(thead);

      const tbody = document.createElement('tbody');
      orders.forEach(order => {
        const row = document.createElement('tr');
        if (["pharmacymoh", "pharmacyjpmc", "pharmacyphc", "localdelivery"].includes(product.toLowerCase())) {
  row.innerHTML = `
    <td>${order.doTrackingNumber || '-'}</td>
    <td>${order.dateUpdated ? moment(order.dateUpdated).utcOffset(8).format("h:mm a") : '-'}</td>
    <td>${order.jobMethod || '-'}</td>
    <td>${order.area || '-'}</td>
    <td>${order.receiverName || '-'}</td>
    <td>${order.receiverPhoneNumber || '-'}</td>
  `;
} else if (product.toLowerCase() === "cbsl") {
  row.innerHTML = `
    <td>${order.doTrackingNumber || '-'}</td>
    <td>${order.parcelTrackingNum || '-'}</td>
    <td>${order.dateUpdated ? moment(order.dateUpdated).utcOffset(8).format("h:mm a") : '-'}</td>
    <td>${order.jobMethod || '-'}</td>
    <td>${order.area || '-'}</td>
    <td>${order.receiverName || '-'}</td>
    <td>${order.receiverPhoneNumber || '-'}</td>
  `;
} else {
  row.innerHTML = `
    <td>${order.doTrackingNumber || '-'}</td>
    <td>${order.dateUpdated ? moment(order.dateUpdated).utcOffset(8).format("h:mm a") : '-'}</td>
    <td>${order.jobMethod || '-'}</td>
    <td>${order.area || '-'}</td>
    <td>${order.receiverName || '-'}</td>
    <td>${order.receiverPhoneNumber || '-'}</td>
  `;
}
        tbody.appendChild(row);
      });

      table.appendChild(tbody);
      body.appendChild(table);
      productCard.appendChild(body);

      container.appendChild(productCard);
    });

  } catch (err) {
    console.error(err);
    container.innerHTML = '<p class="text-danger">Failed to load orders.</p>';
  }
}

// Initial load
const today = new Date().toISOString().split('T')[0];
document.getElementById('grWebsiteDate').value = today;
fetchGRWebsiteOrders(today);

// Auto-refresh when date is changed
document.getElementById('grWebsiteDate').addEventListener('change', (e) => {
  const date = e.target.value;
  if (date) fetchGRWebsiteOrders(date);
});
</script>

</body>

</html>