<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Report Generator</title>
  <!-- Add your custom CSS here -->
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0-alpha1/css/bootstrap.min.css">
<style>
#formSection { margin-top: 20px; }
.hidden { display: none; }
td, th { vertical-align: middle; }
table { border-collapse: collapse; width: auto; min-width: 300px; margin-bottom: 20px; }
th, td { border: 1px solid black; padding: 5px; }
th { background: yellow; font-weight: bold; text-align: center; }
td { white-space: pre-line; text-align: center; }
#reportLogoHeader img { max-height: 80px; display: block; margin: 0 auto 10px auto; }
#assignedByContainer { margin-top: 10px; font-weight: bold; }
button.removeRow { font-size: 0.8rem; padding: 2px 6px; }
/* Custom CSS for your page */
    .navbar-nav.flex-row {
      flex-direction: row !important;
    }

    /* Make the navbar background transparent */
    .navbar {
      background-color: transparent;
    }

    /* Add background color to the container */
    .container-bg {
      background-color: #333;
      /* You can use your desired background color here */
    }

    /* Add margin to the navigation links */
    .navbar-nav.flex-row .nav-item {
      margin-right: 10px;
    }

    /* Add any custom styles specific to your form here */
    .container-bg {
      background-color: #333;
      /* You can use your desired background color here */
    }

    .logo {
  height: 40px;
  width: auto;
  max-height: 40px;
}

@media (max-width: 768px) {
  .logo {
    height: 30px;
    max-height: 30px;
  }
}

@media (max-width: 480px) {
  .logo {
    height: 25px;
    max-height: 25px;
  }
}
</style>
</head>
<body>
  <div class="container-bg">
    <div class="container">
      <div class="row">
        <div class="col-12">
            <nav class="navbar navbar-expand-lg navbar-dark">
  <div class="container d-flex align-items-center">

    <!-- Logo: left on mobile, center on desktop -->
    <a class="navbar-brand d-lg-none" href="/">
      <img src="/images/logoportalwhite.png" alt="Go Rush Logo" class="logo img-fluid">
    </a>

    <!-- Burger menu button -->
    <button class="navbar-toggler ml-auto" type="button" data-toggle="collapse" data-target="#navbarResponsive"
            aria-controls="navbarResponsive" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>

    <!-- Collapsible menu -->
    <div class="collapse navbar-collapse w-100" id="navbarResponsive">

      <!-- Desktop left menus -->
      <ul class="navbar-nav d-none d-lg-flex">
        <% if (['finance','warehouse','cs','dispatcher','manager','admin'].includes(user.role)) { %>
          <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#" id="desktopOperationDropdown" role="button"
               data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Operation</a>
            <div class="dropdown-menu" aria-labelledby="allOrdersDropdown">
                            <% if (['finance', 'warehouse', 'cs' , 'dispatcher' , 'manager' , 'admin' ].includes(user.role)) { %>
                                <a class="dropdown-item" href="/updateDelivery">Update Delivery</a>
                            <% } %>
                            <% if (['warehouse', 'dispatcher' , 'manager' , 'admin' ].includes(user.role)) { %>
                                <a class="dropdown-item" href="https://warehouse.gorushbn.com">Scan Parcel In Warehouse</a>
                            <% } %>
                            <% if (['cs' , 'warehouse' , 'manager' , 'admin'].includes(user.role)) { %>
                                <a class="dropdown-item" href="/podGenerator">POD Generator</a>
                            <% } %>
                            <% if (['finance', 'warehouse', 'cs' , 'dispatcher' , 'manager' , 'admin' ].includes(user.role)) { %>
                                <a class="dropdown-item" href="/addressAreaCheck">Address Area Checker</a>
                                <a class="dropdown-item" href="/searchJobs">Search Jobs</a>
                            <% } %>
                                <% if (['manager' , 'admin'].includes(user.role)) { %>
                                <a class="dropdown-item" href="/reportGenerator">Generate Report</a>
                            <% } %>
                            <% if (['cs' , 'warehouse' , 'manager' , 'admin'].includes(user.role)) { %>
                                <div class="dropdown-divider"></div>
                                <div class="dropdown-header">POD</div>
                                <a class="dropdown-item" href="/listofpharmacyPod">Pharmacy</a>
                                <a class="dropdown-item" href="/listofnoncodPod">EWE/PDU/MGLOBAL</a>
                                <a class="dropdown-item" href="/listofldPod">LD/Pure51/KPT/ICARUS</a>
                                <a class="dropdown-item" href="/listofcbslPod">Cross Border Service (Limbang)</a>
                            <% } %>
                        </div>
          </li>
        <% } %>
        <% if (['moh','cs','manager','admin','warehouse'].includes(user.role)) { %>
          <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#" id="desktopMohDropdown" role="button"
               data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">MOH</a>
            <div class="dropdown-menu" aria-labelledby="mohDropdown">
                            <% if (['moh'].includes(user.role)) { %>
                                <a class="dropdown-item" href="/mohsearch">Search</a>
                            <% } %>
                            <% if (['warehouse', 'cs' , 'manager' , 'admin' ].includes(user.role)) { %>
                                <a class="dropdown-item" href="https://pharmacy.gorushbn.com/mohorders?">Create Pharmacy Form</a>
                            <% } %>
                            <% if (['cs', 'manager' , 'admin' ].includes(user.role)) { %>
                                <a class="dropdown-item" href="https://pharmacy.gorushbn.com/manifestviewer">Pharmacy Form List</a>
                                <a class="dropdown-item" href="/listofWargaEmasOrders">All Warga Emas Orders</a>
                            <% } %>
                        </div>
          </li>
        <% } %>
      </ul>

      <!-- Center logo for desktop -->
      <a class="navbar-brand mx-auto d-none d-lg-flex" href="/">
        <img src="/images/logoportalwhite.png" alt="Go Rush Logo" class="logo img-fluid">
      </a>

      <!-- Desktop right menus -->
      <ul class="navbar-nav ms-auto d-none d-lg-flex">
        <% if (user) { %>
          <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#" id="desktopAccountDropdown" role="button"
               data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
              <%= user.name %> (<%= user.role.toUpperCase() %>)
            </a>
            <div class="dropdown-menu dropdown-menu-right" aria-labelledby="desktopAccountDropdown">
              <a class="dropdown-item" href="/">Dashboard</a>
              <% if (['admin'].includes(user.role)) { %>
                <a class="dropdown-item" href="/createUser">Create User</a>
              <% } %>
              <a class="dropdown-item" href="/logout">Logout</a>
            </div>
          </li>
        <% } else { %>
          <li class="nav-item">
            <a class="nav-link" href="/login">Login</a>
          </li>
        <% } %>
      </ul>

      <!-- Mobile menus (visible when burger expands) -->
      <ul class="navbar-nav d-lg-none mt-2">
        <% if (['finance','warehouse','cs','dispatcher','manager','admin'].includes(user.role)) { %>
          <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#" id="mobileOperationDropdown" role="button"
               data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Operation</a>
            <div class="dropdown-menu" aria-labelledby="allOrdersDropdown">
                            <% if (['finance', 'warehouse', 'cs' , 'dispatcher' , 'manager' , 'admin' ].includes(user.role)) { %>
                                <a class="dropdown-item" href="/updateDelivery">Update Delivery</a>
                            <% } %>
                            <% if (['warehouse', 'dispatcher' , 'manager' , 'admin' ].includes(user.role)) { %>
                                <a class="dropdown-item" href="https://warehouse.gorushbn.com">Scan Parcel In Warehouse</a>
                            <% } %>
                            <% if (['cs' , 'warehouse' , 'manager' , 'admin'].includes(user.role)) { %>
                                <a class="dropdown-item" href="/podGenerator">POD Generator</a>
                            <% } %>
                            <% if (['finance', 'warehouse', 'cs' , 'dispatcher' , 'manager' , 'admin' ].includes(user.role)) { %>
                                <a class="dropdown-item" href="/addressAreaCheck">Address Area Checker</a>
                                <a class="dropdown-item" href="/searchJobs">Search Jobs</a>
                                <% } %>
                                <% if (['manager' , 'admin'].includes(user.role)) { %>
                                <a class="dropdown-item" href="/reportGenerator">Generate Report</a>
                            <% } %>
                            <% if (['cs' , 'warehouse' , 'manager' , 'admin'].includes(user.role)) { %>
                                <div class="dropdown-divider"></div>
                                <div class="dropdown-header">POD</div>
                                <a class="dropdown-item" href="/listofpharmacyPod">Pharmacy</a>
                                <a class="dropdown-item" href="/listofnoncodPod">EWE/PDU/MGLOBAL</a>
                                <a class="dropdown-item" href="/listofldPod">LD/Pure51/KPT/ICARUS</a>
                                <a class="dropdown-item" href="/listofcbslPod">Cross Border Service (Limbang)</a>
                            <% } %>
                        </div>
          </li>
        <% } %>
        <% if (['moh','cs','manager','admin','warehouse'].includes(user.role)) { %>
          <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#" id="mobileMohDropdown" role="button"
               data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">MOH</a>
            <div class="dropdown-menu" aria-labelledby="mohDropdown">
                            <% if (['moh'].includes(user.role)) { %>
                                <a class="dropdown-item" href="/mohsearch">Search</a>
                            <% } %>
                            <% if (['warehouse', 'cs' , 'manager' , 'admin' ].includes(user.role)) { %>
                                <a class="dropdown-item" href="https://pharmacy.gorushbn.com/mohorders?">Create Pharmacy Form</a>
                            <% } %>
                            <% if (['cs', 'manager' , 'admin' ].includes(user.role)) { %>
                                <a class="dropdown-item" href="https://pharmacy.gorushbn.com/manifestviewer">Pharmacy Form List</a>
                                <a class="dropdown-item" href="/listofWargaEmasOrders">All Warga Emas Orders</a>
                            <% } %>
                        </div>
          </li>
        <% } %>
        <% if (user) { %>
          <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#" id="mobileAccountDropdown" role="button"
               data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
              <%= user.name %> (<%= user.role.toUpperCase() %>)
            </a>
            <div class="dropdown-menu" aria-labelledby="mobileAccountDropdown">
              <a class="dropdown-item" href="/">Dashboard</a>
              <% if (['admin'].includes(user.role)) { %>
                <a class="dropdown-item" href="/createUser">Create User</a>
              <% } %>
              <a class="dropdown-item" href="/logout">Logout</a>
            </div>
          </li>
        <% } else { %>
          <li class="nav-item">
            <a class="nav-link" href="/login">Login</a>
          </li>
        <% } %>
      </ul>

    </div>
  </div>
</nav>
        </div>
      </div>
    </div>
  </div>
<div class="container">
<h1 class="text-center mt-4">Report Generator</h1>

<div class="mb-3">
  <label for="reportType" class="form-label">Select Report</label>
  <select id="reportType" class="form-select">
    <option value="">-- Select Report --</option>
    <option value="Operation Morning Report">Operation Morning Report</option>
    <option value="Operation End of Day Report">Operation End of Day Report</option>
  </select>
</div>

<div id="morningReportSection" class="hidden">
  <form id="reportForm">
    <div class="row mb-3">
      <div class="col-md-3">
        <label for="reportDate" class="form-label">Date</label>
        <input type="date" id="reportDate" name="reportDate" class="form-control" required>
      </div>
      <div class="col-md-3">
        <label for="vehicle" class="form-label">Car</label>
        <select id="vehicle" class="form-select">
          <option value="">N/A</option>
          <% vehicles.forEach(v => { %>
            <option value="<%= v.plate %>"><%= v.plate %></option>
          <% }) %>
        </select>
      </div>
      <div class="col-md-3">
        <label for="dispatcher" class="form-label">Dispatcher</label>
        <select id="dispatcher" class="form-select" required>
          <option value="">-- Select Dispatcher --</option>
          <option value="Ghafar">Ghafar</option>
          <option value="Wafi">Wafi</option>
          <option value="Sowdeq">Sowdeq</option>
          <option value="Zakwan">Zakwan</option>
          <option value="Leo">Leo</option>
          <option value="Agung">Agung</option>
        </select>
      </div>
      <div class="col-md-3">
        <label for="assignedJob" class="form-label">Assigned Task</label>
        <textarea id="assignedJob" class="form-control" rows="3" placeholder="Enter one or more jobs, each in a new line"></textarea>
      </div>
    </div>

    <div class="mb-3">
      <button type="button" class="btn btn-primary" id="generateBtn">Generate</button>
      <button type="button" class="btn btn-success hidden" id="saveBtn">Save</button>
      <button type="button" class="btn btn-secondary hidden" id="printBtn">Print</button>
      <button type="button" class="btn btn-danger hidden" id="resetBtn">Reset</button>
    </div>
  </form>

  <!-- Report Parts -->
  <div id="reportLogoHeader" class="text-center mb-3"></div>
  <table id="dispatcherJobsTable" class="table table-bordered">
    <thead id="dispatcherJobsHeader"></thead>
    <tbody></tbody>
  </table>
  <table id="morningMileageTable" class="table table-bordered">
    <thead id="morningMileageHeader"></thead>
    <tbody></tbody>
  </table>
  <div id="assignedByContainer"></div>
</div>

<div id="endOfDayReportSection" class="hidden">
  <div id="reportContainer">
    <form id="endOfDayForm">
      <div class="row mb-3">
        <div class="col-md-3">
          <label for="endReportDate" class="form-label">Date</label>
          <input type="date" id="endReportDate" name="endReportDate" class="form-control" required>
        </div>
      </div>
      <div class="mb-3">
        <button type="button" class="btn btn-primary" id="endGenerateBtn">Generate</button>
        <button type="button" class="btn btn-success hidden" id="endSaveBtn" disabled>Save</button>
        <button type="button" class="btn btn-secondary hidden" id="endPrintBtn">Print</button>
        <button type="button" class="btn btn-danger hidden" id="endResetBtn">Reset</button>
      </div>
    </form>

    <!-- End of Day Report Parts -->
    <div id="endReportLogoHeader" class="text-center mb-3"></div>
    <table id="endStaffJobsTable" class="table table-bordered">
      <thead id="endStaffJobsHeader"></thead>
      <tbody></tbody>
    </table>

    <table id="endDeliveryResultTable" border="1">
      <thead id="endDeliveryResultHeader"></thead>
      <tbody></tbody>
    </table>

    <!-- COD/BT Tables -->
    <div id="codBtCollectedContainer" style="margin-top:30px;"></div>
    <div id="warehouseReportContainer"></div>

  </div>
</div>

<div id="loadingSpinner" style="display:none; position: fixed; top:0; left:0; width:100%; height:100%; background: rgba(255,255,255,0.7); z-index:9999; justify-content: center; align-items: center;">
  <div class="spinner-border text-primary" role="status" style="width: 4rem; height: 4rem;">
    <span class="visually-hidden"></span>
  </div>
</div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://unpkg.com/bootstrap@5.0.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const reportTypeEl = document.getElementById('reportType');
const formSection = document.getElementById('formSection');
const reportDateEl = document.getElementById('reportDate');
const generateBtn = document.getElementById('generateBtn');
const saveBtn = document.getElementById('saveBtn');
const printBtn = document.getElementById('printBtn');
const resetBtn = document.getElementById('resetBtn');
const dispatcherJobsTable = document.getElementById('dispatcherJobsTable');
const dispatcherJobsHeader = document.getElementById('dispatcherJobsHeader');
const dispatcherJobsBody = dispatcherJobsTable.querySelector('tbody');
const morningMileageTable = document.getElementById('morningMileageTable');
const morningMileageHeader = document.getElementById('morningMileageHeader');
const morningMileageBody = morningMileageTable.querySelector('tbody');
const reportLogoHeader = document.getElementById('reportLogoHeader');
const assignedByContainer = document.getElementById('assignedByContainer');
const userId = "<%= user.name %>";
const loadingSpinner = document.getElementById('loadingSpinner');

function showLoading(){ loadingSpinner.style.display='flex'; }
function hideLoading(){ loadingSpinner.style.display='none'; }

function clearReport(){
  reportLogoHeader.innerHTML='';
  dispatcherJobsHeader.innerHTML='';
  dispatcherJobsBody.innerHTML='';
  morningMileageHeader.innerHTML='';
  morningMileageBody.innerHTML='';
  assignedByContainer.innerHTML='';
  reportDateEl.removeAttribute('disabled');
}

reportTypeEl.addEventListener('change', () => {
  clearReport(); // reset both
  if (reportTypeEl.value === 'Operation Morning Report') {
    morningReportSection.classList.remove('hidden');
    endOfDayReportSection.classList.add('hidden');
  } else if (reportTypeEl.value === 'Operation End of Day Report') {
    morningReportSection.classList.add('hidden');
    endOfDayReportSection.classList.remove('hidden');
  } else {
    morningReportSection.classList.add('hidden');
    endOfDayReportSection.classList.add('hidden');
  }
});

generateBtn.addEventListener('click', async () => {
  const date = reportDateEl.value;
  const vehicle = document.getElementById('vehicle').value || 'N/A';
  const dispatcher = document.getElementById('dispatcher').value;
  const assignedJob = document.getElementById('assignedJob').value;
  if (!date || !dispatcher) { alert('Please pick a date and dispatcher'); return; }
  reportDateEl.setAttribute('disabled', 'true');
  showLoading();

  try {
    const res = await fetch('/api/getDispatcherJobSummary', {
      method: 'POST', headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ dispatcher, date })
    });

    const data = await res.json();

    const day = new Date(date).toLocaleDateString('en-GB', { weekday: 'long' });
    const formattedDate = new Date(date).toLocaleDateString('en-GB').replace(/\//g, '.');
    const reportName = `Operation Morning Report ${day} ${formattedDate}`;
    window.currentReportName = reportName;

    // Logo + Header
    reportLogoHeader.innerHTML = `<img src="https://portal.gorushbn.com/images/logo.png" alt="Logo"><h2>${reportName}</h2>`;

    // Dispatcher Assigned Jobs Header
    dispatcherJobsHeader.innerHTML = `
      <tr style="background:yellow;font-weight:bold;text-align:center;"><th colspan="6">Dispatcher Assigned Tasks</th></tr>
      <tr>
        <th>Vehicle No.</th>
        <th>Dispatcher</th>
        <th>Assigned Task</th>
        <th>Area</th>
        <th>Total Delivery</th>
        <th>Action</th>
      </tr>
    `;

    // Remove previous grand total row if exists
    const existingFooter = dispatcherJobsBody.querySelector('tr.grandTotal');
    if (existingFooter) existingFooter.remove();

    // Dispatcher Assigned Jobs Row
    let assignedJobContent = '';
    if (data.totalOrders > 0) {
      assignedJobContent = Object.entries(data.productCounts)
        .map(([p, c]) => `- Deliver ${p} (${c})`)
        .join('\n');
    }
    if (assignedJob) {
      const jobLines = assignedJob.split('\n').map(l => l.trim()).filter(l => l.length > 0).map(l => `- ${l}`).join('\n');
      assignedJobContent += `${assignedJobContent ? '\n' : ''}${jobLines}`;
    }

    const areaContent = data.totalOrders > 0 ? (data.areas.join(',') || '') : '';

    // Total delivery count for this dispatcher
    const totalJobsCount = data.totalOrders || 0;

    // Only add row if there is at least one assigned job
    if (assignedJobContent || totalJobsCount > 0) {
      const row = document.createElement('tr');
      row.innerHTML = `
        <td contenteditable="true">${vehicle}</td>
        <td contenteditable="true">${dispatcher}</td>
        <td contenteditable="true" style="white-space: pre-line;">${assignedJobContent || ''}</td>
        <td contenteditable="true">${areaContent}</td>
        <td>${totalJobsCount}</td>
        <td><button type="button" class="btn btn-danger btn-sm removeRow">Remove</button></td>
      `;
      row.querySelector('td:last-child').removeAttribute('contenteditable');
      dispatcherJobsBody.appendChild(row);

      row.querySelector('.removeRow').addEventListener('click', () => {
        row.remove();
        updateGrandTotal();
        if (dispatcherJobsBody.children.length === 0) clearReport();
      });
    }

    // Grand total function
    function updateGrandTotal() {
      const existingFooter = dispatcherJobsBody.querySelector('tr.grandTotal');
      if (existingFooter) existingFooter.remove();

      const grandTotal = Array.from(dispatcherJobsBody.querySelectorAll('tr'))
        .filter(tr => !tr.classList.contains('grandTotal'))
        .reduce((sum, tr) => sum + (parseInt(tr.children[4].innerText || 0, 10) || 0), 0);

      const footerRow = document.createElement('tr');
      footerRow.classList.add('grandTotal');
      footerRow.style.fontWeight = 'bold';
      footerRow.innerHTML = `
        <td colspan="4" style="text-align:right">Grand Total:</td>
        <td>${grandTotal}</td>
        <td></td>
      `;
      dispatcherJobsBody.appendChild(footerRow);
    }

    updateGrandTotal();

    // Morning Mileage Header
    morningMileageHeader.innerHTML = `
      <tr style="background:yellow;font-weight:bold;text-align:center;">
        <th colspan="5">Morning Mileage</th>
      </tr>
      <tr>
        <th>Vehicle No.</th>
        <th colspan="4">Latest Mileage</th>
      </tr>
    `;

    // Morning Mileage Rows
    try {
      const resM = await fetch('/api/getMorningMileage', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ date })
      });
      const mileageData = await resM.json();

      // Filter out N/A and sort descending
      const validMileage = mileageData.filter(m => m.mileage !== 'N/A');
      validMileage.sort((a, b) => b.mileage - a.mileage);

      morningMileageBody.innerHTML = validMileage
        .map(m => `<tr><td>${m.plate}</td><td colspan="4">${m.mileage}</td></tr>`)
        .join('');
    } catch (e) {
      morningMileageBody.innerHTML = '<tr><td colspan="5">Error loading mileage</td></tr>';
    }

    // Assigned by
    assignedByContainer.innerText = `Assigned and checked by: ${userId}`;

    document.getElementById('vehicle').value = '';
    document.getElementById('dispatcher').value = '';
    document.getElementById('assignedJob').value = '';

    // Show buttons after generate
    saveBtn.classList.remove('hidden');
    resetBtn.classList.remove('hidden');
    printBtn.classList.add('hidden'); // hide until saved

  } catch (err) {
    console.error(err);
    alert('Failed to fetch job summary');
  } finally { hideLoading(); }
});

// --- Save Button ---
saveBtn.addEventListener('click', async () => {
  if (dispatcherJobsBody.children.length === 0) {
    alert('No report to save');
    return;
  }
  showLoading();

  // 🔹 Format date for reportName (dd.mm.yyyy, no day)
  const dateStr = reportDateEl.value;
  const dateObj = new Date(dateStr);
  const formattedDate = dateObj.toLocaleDateString('en-GB').replace(/\//g, '.');
  const reportName = `Operation Morning Report ${formattedDate}`;

  // 🔹 Sort morning mileage rows: largest to smallest, N/A last
  const rows = Array.from(morningMileageBody.querySelectorAll('tr'));
  rows.sort((a, b) => {
    const aVal = a.children[1].innerText === 'N/A' ? -1 : parseInt(a.children[1].innerText, 10);
    const bVal = b.children[1].innerText === 'N/A' ? -1 : parseInt(b.children[1].innerText, 10);
    if (aVal === -1) return 1;
    if (bVal === -1) return -1;
    return bVal - aVal;
  });
  morningMileageBody.innerHTML = '';
  rows.forEach(r => morningMileageBody.appendChild(r));

  // 🔹 Build mileage lookup map
  const mileageMap = {};
  Array.from(morningMileageBody.querySelectorAll('tr')).forEach(row => {
    const vehicle = row.children[0]?.innerText.trim();
    const mileageText = row.children[1]?.innerText.trim();
    let mileage = null;
    if (mileageText && mileageText !== 'N/A') {
      mileage = parseInt(mileageText, 10);
    }
    if (vehicle) mileageMap[vehicle] = mileage;
  });

  // 🔹 Build assignedDispatchers array (include assignedJob)
const assignedDispatchers = [];
Array.from(dispatcherJobsBody.querySelectorAll('tr')).forEach(row => {
  const vehicle = row.children[0]?.innerText.trim();
  const dispatcherName = row.children[1]?.innerText.trim();
  const assignedJobText = row.children[2]?.innerText.trim(); // 🔹 Assigned Job column
  const area = row.children[3]?.innerText.trim();

  if (vehicle && dispatcherName) {
    assignedDispatchers.push({
      vehicle,
      dispatcherName,
      assignedJob: assignedJobText || '',   // 🔹 new field
      area: area || "",
      mileage: mileageMap[vehicle] || null
    });
  }
});

  // 🔹 Build report HTML
  const reportHTML = `
    <div>${reportLogoHeader.outerHTML}</div>
    <div>${dispatcherJobsTable.outerHTML}</div>
    <div>${morningMileageTable.outerHTML}</div>
    <div>${assignedByContainer.outerHTML}</div>
  `;

  const reportType = reportTypeEl.value;

  // 🔹 Function to save with optional forceReplace flag
  async function saveReport(forceReplace = false) {
    try {
      const res = await fetch('/api/saveReport', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          reportType,
          reportContent: reportHTML,
          reportName,
          createdBy: userId,
          assignedDispatchers,
          forceReplace
        })
      });
      const result = await res.json();

      if (result.success) {
        alert(forceReplace ? 'Report replaced successfully!' : 'Report saved successfully!');
        printBtn.classList.remove('hidden'); // show only after save
      } else if (result.duplicate) {
        const confirmReplace = confirm('A report with this name already exists. Do you want to replace it?');
        if (confirmReplace) {
          await saveReport(true); // retry with forceReplace
        }
      } else {
        alert('Failed to save report: ' + result.message);
      }
    } catch (err) {
      console.error(err);
      alert('Error saving report');
    } finally {
      hideLoading();
    }
  }

  // 🔹 Initial save attempt
  await saveReport();
});

printBtn.addEventListener('click', () => {
  showLoading();

  const printWindow = window.open('', '_blank', 'width=900,height=700');
  const dispatcherClone = dispatcherJobsTable.cloneNode(true);
  const morningClone = morningMileageTable.cloneNode(true);

  // Remove Action column from all rows (header + body + footer)
Array.from(dispatcherClone.querySelectorAll('tr')).forEach(tr => {
  const cells = tr.children;
  if (cells.length > 1) { // 🔹 Only remove if more than 1 cell
    const lastCell = cells[cells.length - 1];
    tr.removeChild(lastCell);
  }
});

  // Recalculate grand total for cloned table
  const bodyRows = Array.from(dispatcherClone.querySelectorAll('tbody tr'))
    .filter(tr => !tr.classList.contains('grandTotal'));

  let grandTotal = 0;
  bodyRows.forEach(tr => {
    const td = tr.children[4]; // Total Delivery column
    if(td) grandTotal += parseInt(td.innerText || 0, 10) || 0;
  });

  // Remove old grand total if exists
  const oldFooter = dispatcherClone.querySelector('tr.grandTotal');
  if(oldFooter) oldFooter.remove();

  // Append recalculated grand total row WITHOUT extra Action column
  const footerRow = document.createElement('tr');
  footerRow.classList.add('grandTotal');
  footerRow.style.fontWeight = 'bold';
  footerRow.innerHTML = `
    <td colspan="4" style="text-align:right">Grand Total:</td>
    <td>${grandTotal}</td>
  `;
  dispatcherClone.querySelector('tbody').appendChild(footerRow);

  // Print style
  const style = `
    <style>
      body { font-family: Arial, sans-serif; padding: 20px; }
      h2 { text-align: center; margin-bottom: 20px; }
      table { border-collapse: collapse; width: 100%; margin-bottom: 20px; }
      th, td { border: 1px solid black; padding: 5px; text-align: center; vertical-align: middle; white-space: pre-line; }
      th { font-weight: bold; text-align: center; }
      #dispatcherJobsTable thead tr:first-child th,
      #morningMileageTable thead tr:first-child th { background: yellow; }
      #dispatcherJobsTable thead tr:nth-child(2) th,
      #morningMileageTable thead tr:nth-child(2) th { background: white; }
      img { max-height: 80px; display: block; margin: 0 auto 10px auto; }
    </style>
  `;

  const titleText = window.currentReportName || 'Report';
  printWindow.document.write(`
    <html>
      <head>
        <title>${titleText}</title>
        ${style}
      </head>
      <body>
        <div id="logoHeader">
          <img id="printLogo" src="${reportLogoHeader.querySelector('img')?.src || ''}" alt="Logo">
          <h2>${window.currentReportName}</h2>
        </div>
        ${dispatcherClone.outerHTML}
        ${morningClone.outerHTML}
        <div style="font-weight:bold; margin-top:10px;">${assignedByContainer.innerText}</div>
      </body>
    </html>
  `);
  printWindow.document.close();

  const logoImg = printWindow.document.getElementById('printLogo');
  if(logoImg){
    logoImg.onload = () => { printWindow.focus(); printWindow.print(); hideLoading(); };
    logoImg.onerror = () => { printWindow.focus(); printWindow.print(); hideLoading(); };
  } else {
    printWindow.focus();
    printWindow.print();
    hideLoading();
  }
});

resetBtn.addEventListener('click', ()=>{
  showLoading();
  setTimeout(()=>{
    clearReport();
    morningReportSection.classList.add('hidden');
    endOfDayReportSection.classList.add('hidden');
    reportTypeEl.value='';
    saveBtn.classList.add('hidden');
    printBtn.classList.add('hidden');
    resetBtn.classList.add('hidden');
    hideLoading();
  },100);
});

// --- Reusable Save Function ---
  async function saveReportToServer({ reportType, reportName, reportContent, assignedDispatchers, forceReplace = false }) {
    const res = await fetch("/api/saveReport", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        reportType,
        reportName,
        reportContent,
        assignedDispatchers,
        forceReplace,
      }),
    });
    return await res.json();
  }

  // --- Universal Save Handler ---
  async function handleSave({ reportType, reportDate, reportContent, assignedDispatchers, saveBtn, printBtn, resetBtn }) {
    if (!reportDate) return alert("Please select a date first.");

    const reportName = `${reportType} ${reportDate}`;
    let response = await saveReportToServer({
      reportType,
      reportName,
      reportContent,
      assignedDispatchers,
    });

    // Duplicate? Ask to replace
    if (response.duplicate) {
      if (confirm(`A ${reportType} already exists for ${reportDate}. Replace it?`)) {
        response = await saveReportToServer({
          reportType,
          reportName,
          reportContent,
          assignedDispatchers,
          forceReplace: true,
        });
        if (response.success) alert("Report replaced successfully.");
        else alert(response.message || "Failed to replace report.");
      } else return;
    } else if (response.success) {
      alert("Report saved successfully.");
    } else {
      return alert(response.message || "Failed to save report.");
    }

    // After save success
    saveBtn.classList.add("hidden");
    printBtn.classList.remove("hidden");
    resetBtn.classList.remove("hidden");
  }

function handleReset({ sectionId, saveBtn, printBtn, resetBtn }) {
  if (!confirm("Are you sure you want to reset this report?")) return;

  const section = document.getElementById(sectionId);
  if (!section) return;

  // Keep only the form
  const form = section.querySelector("#endOfDayForm");
  if (!form) return;

  // Remove all other children except the form
  Array.from(section.children).forEach((child) => {
    if (child !== form) {
      child.remove();
    }
  });

  // Hide buttons (Save, Print, Reset)
  if (saveBtn) saveBtn.classList.add("hidden");
  if (printBtn) printBtn.classList.add("hidden");
  if (resetBtn) resetBtn.classList.add("hidden");

  // Re-enable Generate button
  const generateBtn = form.querySelector("#endGenerateBtn");
  if (generateBtn) generateBtn.disabled = false;

  alert("All report contents cleared successfully.");
}

const endGenerateBtn = document.getElementById('endGenerateBtn');
const endSaveBtn = document.getElementById('endSaveBtn');
const endPrintBtn = document.getElementById('endPrintBtn');
const endResetBtn = document.getElementById('endResetBtn');

const endReportLogoHeader = document.getElementById('endReportLogoHeader');
const endStaffJobsTable = document.getElementById('endStaffJobsTable');
const endStaffJobsHeader = document.getElementById('endStaffJobsHeader');

endGenerateBtn.addEventListener('click', async () => {
  const endReportDate = document.getElementById('endReportDate').value;
  if (!endReportDate) { alert('Please pick a date'); return; }

  try {
    const res = await fetch('/api/getEndOfDaySummary', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ date: endReportDate })
    });

    const data = await res.json();
    if (!data.success) { alert('Failed to fetch report'); return; }

    const formattedDate = new Date(endReportDate).toLocaleDateString('en-GB').replace(/\//g, '.');
    const reportTitle = `Operation End of Day Report ${formattedDate}`;

    // Logo + Title
    endReportLogoHeader.innerHTML = `
      <img src="https://portal.gorushbn.com/images/logo.png" alt="Logo" style="width:300px; height:auto;">
      <h2>${reportTitle}</h2>
    `;

    // Table header (Staff's Tasks)
    endStaffJobsHeader.innerHTML = `
      <tr style="background:lightblue;font-weight:bold;">
        <th colspan="3" style="text-align:left;">1. Staff's Tasks</th>
      </tr>
      <tr>
        <th>Staff Name</th>
        <th>Assigned Task</th>
        <th>Action</th>
      </tr>
    `;

    // Table body
    const tbody = endStaffJobsTable.querySelector('tbody');
    tbody.innerHTML = '';

    data.reports.forEach(report => {
      // Staff row (currently logged-in user)
      const staffRow = document.createElement('tr');
      staffRow.innerHTML = `
        <td contenteditable="true">${userId}</td>
        <td contenteditable="true" style="white-space: pre-line;">- Assigned dispatchers and prepare for delivery
- Count COD from dispatchers
</td>
        <td><button class="btn btn-sm btn-danger removeRowBtn">🗑️</button></td>
      `;
      tbody.appendChild(staffRow);

      // Dispatcher rows
      report.assignedDispatchers.forEach(d => {
        const filteredJobs = d.assignedJob
          .split('\n')
          .filter(line => !line.startsWith('- Deliver '))
          .join('\n');

        if (filteredJobs.trim().length === 0) return;

        const row = document.createElement('tr');
        row.innerHTML = `
          <td contenteditable="true">${d.dispatcherName}</td>
          <td contenteditable="true" style="white-space: pre-line;">${filteredJobs}</td>
          <td><button class="btn btn-sm btn-danger removeRowBtn">🗑️</button></td>
        `;
        tbody.appendChild(row);
      });
    });

    // Attach remove button to all rows
    tbody.querySelectorAll('tr').forEach(row => {
      const delBtn = row.querySelector('.removeRowBtn');
      if (delBtn) delBtn.addEventListener('click', () => row.remove());
    });

    // Add "Add Row" button below table
    let addBtn = document.getElementById('addStaffRowBtn');
    if (!addBtn) {
      addBtn = document.createElement('button');
      addBtn.id = 'addStaffRowBtn';
      addBtn.className = 'btn btn-primary btn-sm mt-2';
      addBtn.textContent = '➕ Add Row';
      endStaffJobsTable.parentNode.appendChild(addBtn);

      addBtn.addEventListener('click', () => {
        const newRow = document.createElement('tr');
        newRow.innerHTML = `
          <td contenteditable="true"></td>
          <td contenteditable="true"></td>
          <td><button class="btn btn-sm btn-danger removeRowBtn">🗑️</button></td>
        `;
        tbody.appendChild(newRow);
        newRow.querySelector('.removeRowBtn').addEventListener('click', () => newRow.remove());
      });
    }

    // Load other tables
    await loadDeliveryResult(endReportDate);
    await loadCodBtCollected(endReportDate);
    await loadWarehouseTable(endReportDate);

// Insert Pure51 Inventory Stock table
const pure51Container = document.createElement('div');
pure51Container.style.marginTop = "30px";
pure51Container.innerHTML = `
  <table class="table table-bordered" id="pure51StockTable">
    <thead>
      <tr style="background:lightblue;font-weight:bold;">
        <th colspan="2" style="text-align:left;">4.1. Pure51 Inventory Stock</th>
      </tr>
      <tr>
        <th>Item</th>
        <th>Balance</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>Feminine Wash 200ml</td>
        <td contenteditable="true"></td>
      </tr>
      <tr>
        <td>Feminine Wash 75ml</td>
        <td contenteditable="true"></td>
      </tr>
      <tr>
        <td>Lingerie Wash 100ml</td>
        <td contenteditable="true"></td>
      </tr>
    </tbody>
  </table>
`;
reportContainer.appendChild(pure51Container);

    await loadVehicleReport(endReportDate);

    // (Assume your existing logic builds the report tables here)
    alert("End of Day Report generated successfully.");

    endSaveBtn.classList.remove("hidden");
    endResetBtn.classList.remove("hidden");
    endPrintBtn.classList.add("hidden");
    endSaveBtn.removeAttribute("disabled");
  } catch (err) {
    console.error(err);
    alert('Error fetching report');
  }
});

async function loadDeliveryResult(date) {
  const reportContainer = document.getElementById('reportContainer');
  if (!reportContainer) return console.error('reportContainer element not found in DOM.');

  try {
    const res = await fetch(`/api/delivery-result-report?date=${date}`);
    const { products, results } = await res.json();

    // Spacer
    const spacer = document.createElement("div");
    spacer.style.marginTop = "30px";
    reportContainer.appendChild(spacer);

    // Table
    const table = document.createElement("table");
    table.className = "table table-bordered";

    // Table header
    const thead = document.createElement("thead");

    const headerRow = document.createElement("tr");
    headerRow.style.backgroundColor = "lightblue";
    headerRow.style.fontWeight = "bold";
    const headerCell = document.createElement("th");
    headerCell.colSpan = 2 + products.length + 4;
    headerCell.style.textAlign = "left";
    headerCell.innerText = "2. Job Result";
    headerRow.appendChild(headerCell);
    thead.appendChild(headerRow);

    const colRow = document.createElement("tr");
    ["Staff", "Area", "Vehicle", "Jobs", ...products, "Total", "Success Rate"].forEach(h => {
      const th = document.createElement("th");
      th.innerText = h;
      colRow.appendChild(th);
    });
    thead.appendChild(colRow);
    table.appendChild(thead);

    const tbody = document.createElement("tbody");

    const filteredResults = results
      .filter(r => r.staff !== "N/A" && r.staff !== "Unassigned")
      .sort((a, b) => (a.staff === "Selfcollect" ? 1 : b.staff === "Selfcollect" ? -1 : 0));

    filteredResults.forEach(r => {
      const tdSR = document.createElement("td"); // Success Rate cell, rowspan=3
      tdSR.rowSpan = 3;
      tdSR.contentEditable = false;

      const rowCells = {}; // product -> {current, completed, failed}

      ["current", "completed", "failed"].forEach((type, idx) => {
        const row = document.createElement("tr");

        // Staff, Area, Vehicle
        if (idx === 0) {
          const tdStaff = document.createElement("td");
          tdStaff.rowSpan = 3;
          tdStaff.innerText = r.staff;
          row.appendChild(tdStaff);

          const tdArea = document.createElement("td");
          tdArea.rowSpan = 3;
          tdArea.innerText = r.staff === "Selfcollect" ? "-" : r.area || "-";
          row.appendChild(tdArea);

          const tdVehicle = document.createElement("td");
          tdVehicle.rowSpan = 3;
          tdVehicle.innerText = r.vehicle || "-";
          row.appendChild(tdVehicle);
        }

        // Jobs column
        const displayNames = { current: "Assigned", completed: "Completed", failed: "Failed" };
        const tdJobs = document.createElement("td");
        tdJobs.innerText = displayNames[type];
        tdJobs.style.fontWeight = "bold";
        row.appendChild(tdJobs);

        // Product cells
        const productTds = [];
        products.forEach((p, i) => {
          const td = document.createElement("td");
          td.contentEditable = true;
          td.innerText = r.productCounts[p][type];

          if (!rowCells[p]) rowCells[p] = {};
          rowCells[p][type] = td;

          // Initial highlight if value exists
          if (type === "completed" && parseInt(td.innerText) > 0) td.style.backgroundColor = "#d4f4d4";
          if (type === "failed" && parseInt(td.innerText) > 0) td.style.backgroundColor = "#f4d4d4";

          // Add input listener to dynamically highlight on change
          td.addEventListener("input", () => {
            const val = parseInt(td.innerText) || 0;
            if (type === "completed") td.style.backgroundColor = val > 0 ? "#d4f4d4" : "";
            if (type === "failed") td.style.backgroundColor = val > 0 ? "#f4d4d4" : "";

            // Assigned row constraint: Assigned >= Completed + Failed
            if (type === "current") {
              const completedVal = parseInt(rowCells[p]["completed"]?.innerText || 0);
              const failedVal = parseInt(rowCells[p]["failed"]?.innerText || 0);
              if (val < completedVal + failedVal) td.innerText = completedVal + failedVal;
            }

            calculateTotal();
          });

          row.appendChild(td);
          productTds.push(td);
        });

        // Total column
        const tdTotal = document.createElement("td");
        const calculateTotal = () => {
          const total = productTds.reduce((sum, td) => sum + (parseInt(td.innerText) || 0), 0);
          tdTotal.innerText = total;

          // Highlight Total column only if value > 0
          if (type === "completed" && total > 0) tdTotal.style.backgroundColor = "#d4f4d4";
          else if (type === "failed" && total > 0) tdTotal.style.backgroundColor = "#f4d4d4";
          else tdTotal.style.backgroundColor = "";

          // Calculate Success Rate
          let completedTotal = 0;
          let assignedTotal = 0;
          products.forEach(p => {
            const c = parseInt(rowCells[p]["completed"]?.innerText || 0);
            const a = parseInt(rowCells[p]["current"]?.innerText || 0);
            completedTotal += c;
            assignedTotal += a;
          });
          const successRate = assignedTotal === 0 ? 100 : Math.round((completedTotal / assignedTotal) * 100);
          tdSR.innerText = successRate + "%";
          tdSR.style.backgroundColor = successRate < 100 ? "lightyellow" : "";
        };
        calculateTotal();
        row.appendChild(tdTotal);

        // Append Success Rate to first row
        if (idx === 0) row.appendChild(tdSR);

        tbody.appendChild(row);
      });
    });

    table.appendChild(tbody);
    reportContainer.appendChild(table);
    
  } catch (err) {
    console.error('Error loading delivery results:', err);
  }
}

async function loadCodBtCollected(date) {
  const reportContainer = document.getElementById('reportContainer');
  if (!reportContainer) return console.error('reportContainer not found');

  try {
    const res = await fetch('/api/cod-bt-collected', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ date })
    });
    const html = await res.text();

    // Spacer
    const spacer = document.createElement("div");
    spacer.style.marginTop = "30px";
    reportContainer.appendChild(spacer);

    // Container for COD/BT table
    const codContainer = document.createElement("div");
    codContainer.innerHTML = html;
    reportContainer.appendChild(codContainer);

  } catch (err) {
    console.error('Error loading COD/BT Collected:', err);
  }
}

async function loadWarehouseTable(date) {
  const reportContainer = document.getElementById('reportContainer');
  if (!reportContainer) return console.error('reportContainer not found');

  try {
    const res = await fetch('/api/warehouseTableGenerate', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ date })
    });
    const html = await res.text();

    // Spacer
    const spacer = document.createElement("div");
    spacer.style.marginTop = "30px";
    reportContainer.appendChild(spacer);

    // Container for Warehouse table
    const whContainer = document.createElement("div");
    whContainer.innerHTML = html;
    reportContainer.appendChild(whContainer);

  } catch (err) {
    console.error('Error loading Warehouse table:', err);
  }
}

async function loadVehicleReport(date) {
  const reportContainer = document.getElementById('reportContainer');
  if (!reportContainer) return console.error('reportContainer not found');

  try {
    const res = await fetch('/api/vehicle-report', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ date })
    });
    const html = await res.text();

    const spacer = document.createElement("div");
    spacer.style.marginTop = "30px";
    reportContainer.appendChild(spacer);

    const vehicleContainer = document.createElement("div");
    vehicleContainer.innerHTML = html;
    reportContainer.appendChild(vehicleContainer);

    const table = vehicleContainer.querySelector('#vehicleReportTable');
    const tbody = table.querySelector('tbody');
    const addRowBtn = vehicleContainer.querySelector('#addVehicleRowBtn');

    addRowBtn.addEventListener('click', () => {
  const newRow = document.createElement('tr');
  newRow.innerHTML = `
    <td contenteditable="true"></td>
    <td contenteditable="true"></td>
    <td><input type="number" class="morningMileage" value="0"></td>
    <td><input type="number" class="eodMileage" placeholder="Enter EOD Mileage"></td>
    <td><input type="number" class="mileageUsed" value="0" readonly></td>
    <td>
      <select class="form-select">
        <option value="">-</option>
        <option value="Yes">Yes</option>
        <option value="No">No</option>
      </select>
    </td>
    <td contenteditable="true"></td>
    <td contenteditable="true"></td>
    <td contenteditable="true"></td>
    <td contenteditable="true"></td>
    <td><button class="btn btn-sm btn-danger removeRowBtn">🗑️</button></td>
  `;
  tbody.appendChild(newRow);
  attachRowEvents(newRow);
});

    // Attach delete & mileage calculation to all existing rows
    tbody.querySelectorAll('tr').forEach(row => attachRowEvents(row));

    function attachRowEvents(row) {
  const delBtn = row.querySelector('.removeRowBtn');
  if (delBtn) delBtn.addEventListener('click', () => row.remove());

  const morningInput = row.querySelector('.morningMileage');
  const eodInput = row.querySelector('.eodMileage');
  const usedInput = row.querySelector('.mileageUsed');

  function recalc() {
    const morningVal = parseFloat(morningInput.value) || 0;
    const eodVal = parseFloat(eodInput.value) || 0;
    usedInput.value = isNaN(eodVal - morningVal) ? '' : (eodVal - morningVal);
  }

  morningInput.addEventListener('input', recalc);
  eodInput.addEventListener('input', recalc);
}

  } catch (err) {
    console.error('Error loading Vehicle Report:', err);
  }
}

// --- Save Button ---
  endSaveBtn?.addEventListener("click", async () => {
    const reportDate = document.getElementById("endReportDate").value;
    const reportContent = document.getElementById("endOfDayReportSection").innerHTML;
    const assignedDispatchers = []; // (Optional) add dispatchers if available

    await handleSave({
      reportType: "Operation End of Day Report",
      reportDate,
      reportContent,
      assignedDispatchers,
      saveBtn: endSaveBtn,
      printBtn: endPrintBtn,
      resetBtn: endResetBtn,
    });
  });

  document.getElementById("endPrintBtn").addEventListener("click", function () {
  showLoading();

  // --- 1️⃣ Hide elements not needed in print ---
  const hiddenElements = [
    document.querySelector("#endOfDayForm"),
    document.querySelector("#addStaffRowBtn"),
    document.querySelector("#addVehicleRowBtn"),
  ];
  hiddenElements.forEach(el => el && (el.style.display = "none"));

  // Hide "Action" columns
  const actionSelectors = [
    "#endStaffJobsTable th:last-child",
    "#endStaffJobsTable td:last-child",
    "#vehicleReportTable th:last-child",
    "#vehicleReportTable td:last-child",
  ];
  const hiddenCols = document.querySelectorAll(actionSelectors.join(","));
  hiddenCols.forEach(el => (el.style.display = "none"));

  // --- 2️⃣ Clone section for printing ---
  const sectionClone = document.querySelector("#endOfDayReportSection").cloneNode(true);

  // --- 3️⃣ Restore the "5. Vehicle Report" header visibility ---
  const vehicleHeader = sectionClone.querySelector("#vehicleReportTable thead tr:first-child th");
  if (vehicleHeader) vehicleHeader.style.display = "table-cell";

  // --- 4️⃣ Replace inputs and selects with their text values ---
  sectionClone.querySelectorAll("input, select").forEach(el => {
    const value =
      el.tagName === "SELECT"
        ? el.options[el.selectedIndex]?.text || ""
        : el.value || "";
    const span = document.createElement("span");
    span.textContent = value;
    span.style.whiteSpace = "pre-wrap";
    el.parentNode.replaceChild(span, el);
  });

  // --- 5️⃣ Generate dynamic filename ---
  const today = new Date();
  const dd = String(today.getDate()).padStart(2, "0");
  const mm = String(today.getMonth() + 1).padStart(2, "0");
  const yyyy = today.getFullYear();
  const fileName = `End of Day Report ${dd}.${mm}.${yyyy}`;

  // --- 6️⃣ Prepare printable HTML ---
  const printHTML = `
    <html>
      <head>
        <title>${fileName}</title>
        <style>
          body { font-family: Arial, sans-serif; padding: 25px; }
          h2 { text-align: center; margin: 10px 0 20px; }
          table { width: 100%; border-collapse: collapse; margin-bottom: 25px; }
          th, td {
            border: 1px solid #000;
            padding: 6px 8px;
            font-size: 14px;
            text-align: center;
            vertical-align: middle;
          }
          th { background-color: #e6f2ff; font-weight: bold; }
          tr:first-child th[colspan] {
            background-color: lightblue !important;
            text-align: left;
            font-size: 15px;
          }
          img { display: block; margin: 0 auto; max-height: 80px; }
          @media print {
            body { zoom: 90%; }
          }
        </style>
      </head>
      <body>
        ${sectionClone.innerHTML}
      </body>
    </html>
  `;

  // --- 7️⃣ Open print window ---
  const printWindow = window.open("", "_blank", "width=900,height=700");
  printWindow.document.open();
  printWindow.document.write(printHTML);
  printWindow.document.close();

  printWindow.onload = function () {
    // ✅ Set filename hint before printing
    printWindow.document.title = fileName;
    printWindow.focus();
    printWindow.print();
    hideLoading();
  };

  // --- 8️⃣ Restore hidden elements after print ---
  hiddenElements.forEach(el => el && (el.style.display = ""));
  hiddenCols.forEach(el => (el.style.display = ""));
});

  // --- Reset Button ---
  endResetBtn?.addEventListener("click", () => {
    handleReset({
      sectionId: "endOfDayReportSection",
      saveBtn: endSaveBtn,
      printBtn: endPrintBtn,
      resetBtn: endResetBtn,
    });
  });
    });
</script>
</body>
</html>
